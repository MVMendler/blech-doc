<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blech – Blech Blog</title>
    <link>https://www.blech-lang.org/blog/</link>
    <description>Recent content in Blech Blog on Blech</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://www.blech-lang.org/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Blog: The basic idea behind Blech – A practitioner&#39;s point of view</title>
      <link>https://www.blech-lang.org/blog/2020/07/22/the-basic-idea-behind-blech-a-practitioners-point-of-view/</link>
      <pubDate>Wed, 22 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.blech-lang.org/blog/2020/07/22/the-basic-idea-behind-blech-a-practitioners-point-of-view/</guid>
      <description>
        
        
        &lt;h2 id=&#34;application-example-uart-communication&#34;&gt;Application example: UART communication&lt;/h2&gt;
&lt;p&gt;Let us consider a simple embedded use case. We want to implement a &lt;a href=&#34;https://de.wikipedia.org/wiki/Universal_Asynchronous_Receiver_Transmitter&#34; target=&#34;_blank&#34;&gt;UART&lt;/a&gt;
 communication. For the sake of simplicity, we focus on the data transmission only. Given a number of bytes in a data buffer, the job is to physically send them via the serial interface one after the other. The implementation is to be done on the bare metal; no operating system, no fancy hardware abstraction layers or library functions.&lt;/p&gt;
&lt;p&gt;Apart from the sole functional correctness it is important that the application is generally compatible with the stringent constraints of the embedded domain. That is, very limited resources &amp;ndash; &lt;em&gt;computation time&lt;/em&gt; and &lt;em&gt;memory&lt;/em&gt; &amp;ndash; and possible &lt;em&gt;realtime requirements&lt;/em&gt;. Keeping the embedded software reactive is key in order to handle realtime-critical events in time.&lt;/p&gt;
&lt;p&gt;Below sections discuss different implementation schemes in C and Blech for realizing the buffer transmission.&lt;/p&gt;
&lt;h2 id=&#34;implementation-schemes-in-c&#34;&gt;Implementation schemes in C&lt;/h2&gt;
&lt;p&gt;In the following section we consider the pros and cons of two popular programming styles for implementing the UART communication in C. The focus is on software engineering and suitability for the embedded domain.&lt;/p&gt;
&lt;h3 id=&#34;the-blocking-style&#34;&gt;The blocking style&lt;/h3&gt;
&lt;p&gt;Let us assume that we &amp;ndash; as software developers &amp;ndash; do not have any experience in writing embedded code and we do not know anything about the stringent constraints imposed by the embedded domain. We just (naively) start by implementing a function &lt;code&gt;send_buffer&lt;/code&gt; that encapsulates all the details required for data transmission. This approach is reasonable and natural because this is what we have been taught in school and at the university. Motivated by several fundamental software engineering principles such as abstraction, separation of concerns, encapsulation and so forth we develop the solution below:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;send_buffer&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;u8&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;buf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;u16&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;len&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;u16&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;len&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;UART1_FLAG_TXE&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;UART1&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;DR&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;buf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;];&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;We pass the buffer and its length to the function. Then, we loop over the buffer. For each byte, we first wait for the UART device to become ready, second copy the next byte into the UART data register and third check whether or not we have reached the end of the buffer &amp;ndash; it is as simple as that.&lt;/p&gt;
&lt;p&gt;In this approach, everything related to the transmission is &lt;em&gt;local&lt;/em&gt;. With local I not only mean the data in sense of local variables. I also mean the code &amp;ndash; the knowledge &amp;ndash; that is required to describe all necessary steps that have to be done. This makes it not only easy to comprehend how the transmission actually works but also facilitates its usage, debugging and maintenance. If something is not working as expected or if we want to change or extend the procedure in some way we know that &lt;code&gt;send_buffer&lt;/code&gt; is the sole code block to look at.&lt;/p&gt;
&lt;p&gt;However, there is a high price to be paid in order to obtain above encapsulation benefits. If we want to encapsulate the transmission of an entire buffer &amp;ndash; and not only of single bytes &amp;ndash; a call of &lt;code&gt;send_buffer&lt;/code&gt; must inevitably outlive the transmission of multiple bytes. For this, its code has to be implemented in a &lt;em&gt;blocking&lt;/em&gt; fashion so that it does not terminate once a single byte has been sent out. This becomes apparent from Line 5 in which we wait for the UART device to finish the transmission of the current byte. A &lt;code&gt;while&lt;/code&gt; loop polls the corresponding UART flag in order to block the control flow of &lt;code&gt;send_buffer&lt;/code&gt; before it proceeds with the next byte. The runtime behaviour of &lt;code&gt;send_buffer&lt;/code&gt; is exemplarily depicted below:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;oszi_1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Above example scope capture shows the transmission of a 3-byte buffer. &lt;code&gt;SW&lt;/code&gt; indicates when the CPU is busy (&lt;code&gt;SW -&amp;gt; HIGH&lt;/code&gt;) with executing &lt;code&gt;send_buffer&lt;/code&gt; while &lt;code&gt;TX&lt;/code&gt; shows the physical output signal of the UART hardware. It is easy to see that the entire processing time is eaten up by &lt;code&gt;send_buffer&lt;/code&gt; until the last byte has been sent out. This causes several drawbacks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The thread calling &lt;code&gt;send_buffer&lt;/code&gt; is blocked for anything else. No other code can run concurrently so that
&lt;ul&gt;
&lt;li&gt;no other concerns of the embedded system can be processed.&lt;/li&gt;
&lt;li&gt;no other (important) events can be handled meanwhile.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The CPU continuously runs at full speed leading to high consumption of processing time and energy.&lt;/li&gt;
&lt;li&gt;The call stack of &lt;code&gt;send_buffer&lt;/code&gt; is not freed so that memory cannot be reused for other concerns meanwhile.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Remember that, depending on the UART baudrate and the length of the buffer, above conditions can be true for a significant period of time. Consider a typical UART baudrate of 115.200bit/s and a buffer length of 1024bit. In this case, one execution of &lt;code&gt;send_buffer&lt;/code&gt; would already block your software for 8.88 milliseconds &amp;ndash; a small eternity in the embedded domain! Thus, in sum, this approach leads to &lt;em&gt;poor reactivity&lt;/em&gt; and &lt;em&gt;high resource consumption&lt;/em&gt;.&lt;/p&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Conclusion&lt;/h4&gt;
&lt;p&gt;As a conclusion we can say that the &lt;em&gt;blocking style&lt;/em&gt; makes it generally&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;easy&lt;/strong&gt; to fulfil software engineering principles.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;hard&lt;/strong&gt; to fulfil constraints of the embedded domain.&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;

&lt;h3 id=&#34;the-event-based-style&#34;&gt;The event-based style&lt;/h3&gt;
&lt;p&gt;Due to above limitations, practically all embedded software solutions decide in favour of the stringent embedded constraints and follow a non-blocking, &lt;em&gt;event-based&lt;/em&gt; style instead. In this approach, code is executed only if necessary. That is, whenever an &lt;em&gt;event&lt;/em&gt; &amp;ndash; a noteable change of the environment &amp;ndash; has happened.&lt;/p&gt;
&lt;p&gt;Event-driven behaviour, however, is not supported by C on language level. Typical workarounds rely on &lt;em&gt;statemachines&lt;/em&gt; and &lt;em&gt;callbacks&lt;/em&gt; that are executed in an asynchronous-concurrent fashion. See the example below:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;u8&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;_buf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;u16&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;_len&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;u16&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;_tx&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#000&#34;&gt;ISR&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;UART1_TX&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;_tx&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;_tx&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;_len&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;UART1&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;DR&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;_buf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;_tx&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;];&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;send_buffer&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;u8&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;buf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;u16&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;len&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;UART1_FLAG_TXE&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;_buf&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;buf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;_len&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;len&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;_tx&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;UART1&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;DR&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;_buf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;_tx&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;];&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;In this solution, &lt;code&gt;send_buffer&lt;/code&gt; is only used to &lt;em&gt;initiate&lt;/em&gt; the buffer transfer. It waits for the UART device to become ready, saves the buffer, its length and a transmission counter as global variables, and finally writes the first buffer byte into the UART data register. Then, in contrast to the blocking style above, &lt;code&gt;send_buffer&lt;/code&gt; immediately terminates although not even a single byte has been actually transmittet yet.&lt;/p&gt;
&lt;p&gt;Once the first byte has physically left the UART device, the hardware automatically executes the interrupt service routine in Line 12 which picks the next byte from the buffer and triggers its transmission. This process repeats for each byte until the entire buffer has been transferred. Ultimately, the buffer transmission is driven by a chain of callbacks that advances the progress step by step. The corresponding runtime behaviour of this approach is shown below:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;oszi_2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;This time, the CPU is only busy when a new byte transmission is to be triggered. Meanwhile it could either process other concerns, react on other events or go to sleep in order to save energy. Since &lt;code&gt;send_buffer&lt;/code&gt; terminates after each byte its stack space is freed and can be easily reused for something else. By this, the event-driven approach perfectly fits the embedded domain.&lt;/p&gt;
&lt;p&gt;However, all the valuable software engineering benefits of the blocking approach are gone. The functionality &amp;ldquo;buffer transmission&amp;rdquo; is now torn apart a function, an interrupt service routine and a set of global variables. This eliminates locality and requires me &amp;ndash; the software developer &amp;ndash; to implement &lt;em&gt;manual stack&lt;/em&gt; and &lt;em&gt;state management&lt;/em&gt; in order to maintain the program state across several function and ISR calls respectively.&lt;/p&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Note&lt;/h4&gt;
Remember that stack and state management are actually low-level tasks done by the &lt;a href=&#34;https://de.wikipedia.org/wiki/Prozessor&#34; target=&#34;_blank&#34;&gt;CPU&lt;/a&gt;
, using a program counter and a set of working registers, in order to reduce the burden of the software developer. Now, with statemachines and callbacks, we have to do this tedious and error-prone job in my high-level programming realm &amp;ndash; doesn&amp;rsquo;t that sound kind of inherently contradictory and counterproductive?
&lt;/div&gt;

&lt;p&gt;All the data (the stack) that has to outlive multiple function calls, e.g. the pointer of the buffer, the buffer length and the transmission counter, have to be stored in global memory. The latter by itself entails a whole line up of engineering drawbacks. In addition, the asynchronous event-driven execution of &lt;code&gt;send_buffer&lt;/code&gt; and the interrupt service routine provokes concurrency bugs and non-deterministic runtime behaviour by design. By the way, what will happen if &lt;code&gt;send_buffer&lt;/code&gt; is called while a buffer transmission is still ongoing?&lt;/p&gt;
&lt;p&gt;The progress of the program (the state) is encoded in a statemachine that advances on each event. On the one hand, statemachines are generally a very efficient and well understood technology in order to describe and execute event-driven behaviour for and by &lt;em&gt;machines&lt;/em&gt; respectively. But, on the other hand, statemachines are less suitable for &lt;em&gt;humans&lt;/em&gt;, especially when it comes to readability and comprehensibility.&lt;/p&gt;
&lt;p&gt;In statemachines, &lt;em&gt;state is explicit&lt;/em&gt; while &lt;em&gt;control flow is implicit&lt;/em&gt;. This makes it easy to generically describe and perform single computation steps by transition tables based on the current state and the current input. But for us &amp;ndash; as software developers &amp;ndash; this is &lt;em&gt;not&lt;/em&gt; the natural understanding with what we have grown up. We are used to write code in a sequential fashion in which control flow is paramount. State is only implicitly given by the current code line that is to be executed and the set of variables. When looking at a statemachine implementation, irrespective of whether it is given as C code or a graphical drawing, it is generally difficult to comprehend the sequence of decisions and commands that have to be taken and executed in order to realize a certain functionality.&lt;/p&gt;
&lt;p&gt;Finally, think about how you would establish automated tests for this kind of code. You could write unit tests for each of the functions &amp;ndash; which is by itself not easy because they internally rely on global variables &amp;ndash; but this only covers the behaviour of your software on a per event basis. With this approach, it is really difficult to systematically test the behaviour over time across several reactions. Not only because the code is highly distributed but also because the runtime behaviour is inherently non-deterministic and hence not reproducible.&lt;/p&gt;
&lt;p&gt;To sum it up, the event-based style encourages software solutions that are difficult to program, comprehend, test and maintain.&lt;/p&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Conclusion&lt;/h4&gt;
&lt;p&gt;As a conclusion we can say that the &lt;em&gt;event-based style&lt;/em&gt; makes it generally&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;hard&lt;/strong&gt; to fulfil software engineering principles.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;easy&lt;/strong&gt; to fulfil constraints of the embedded domain.&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;

&lt;h2 id=&#34;a-higher-abstraction-level---the-pseudo-blocking-style&#34;&gt;A higher abstraction level - the pseudo-blocking style&lt;/h2&gt;
&lt;p&gt;Looking back to above implementation schemes the following becomes apparent:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The blocking style, on the one hand, typically leads to good software quality but is generally not applicable in the embedded domain.&lt;/li&gt;
&lt;li&gt;The event-driven style, on the other hand, perfectly matches the stringent embedded constraints but it seems that we figuratively fallback to a lower level of programming.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What if we lived in a &lt;em&gt;perfect world&lt;/em&gt; where we could cherry-pick and combine the advantages of both approaches? &amp;ndash; Welcome to Blech!&lt;/p&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Basic Idea&lt;/h4&gt;
The basic idea behind Blech is to let the software developer write code in a &lt;em&gt;blocking fashion&lt;/em&gt; (good software quality) and systematically compile it into an efficient, deterministic, &lt;em&gt;event-driven&lt;/em&gt; statemachine implementation (fit embedded domain). By this, Blech code allows to recover all the software engineering advantages mentioned above and, at the same time, fulfills the stringent embedded constraints. This combination is usually hard to achieve and makes Blech &lt;em&gt;lifting embedded programming to the next level&lt;/em&gt;.
&lt;/div&gt;

&lt;p&gt;This concept is what I call the &lt;em&gt;pseudo-blocking&lt;/em&gt; style. Your software looks and logically behaves like blocking code but is actually non-blocking under the hood. On the bare metal, it can easily interleave its execution with other synchronous or asynchronous parts of your software. For example, there could be some cryptographic algorithm asynchronously running in a background task while your Blech program continously reacts on incoming events.&lt;/p&gt;
&lt;p&gt;The following code snippet shows how the buffer transmission can look like in Blech:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-blech&#34; data-lang=&#34;blech&#34;&gt;@[CFunction (binding = &amp;quot;UART_isReady&amp;quot;, header = &amp;quot;uart.h&amp;quot;)]
extern singleton function uart_isReady() returns bool
@[CFunction (binding = &amp;quot;UART_sendByte&amp;quot;, header = &amp;quot;uart.h&amp;quot;)]
extern singleton function uart_sendByte(val: nat8)

const LEN: nat16 = 20

activity SendBuffer (buf: [LEN]nat8, len: nat16)
    var i: nat16 = 0
    repeat
        await uart_isReady()
        uart_sendByte(buf[i])
        i = i + 1
    until (i &amp;gt;= len) or (i &amp;gt;= LEN) end
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In the first four lines we declare the signatures of two external C functions that can be called by Blech in order to actually interact with the UART hardware. After that, an &lt;em&gt;activity&lt;/em&gt; is used to encapsulate all the data transmission code. We pass the buffer and its length as parameters. A &lt;code&gt;repeat&lt;/code&gt; loop is subsequently used to&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;suspend the activity until the UART is ready for transmission (Line 11).&lt;/li&gt;
&lt;li&gt;write the next buffer byte to the UART data register (Line 12).&lt;/li&gt;
&lt;li&gt;repeat from (1) until the end of buffer has been reached.&lt;/li&gt;
&lt;/ol&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Note&lt;/h4&gt;
In the C environment, &lt;code&gt;ISR (UART1_TX)&lt;/code&gt; is used to generate an event for triggering the Blech program. This means that &lt;code&gt;await uart_isReady()&lt;/code&gt; will return as soon as possible after a byte has been transmitted &amp;ndash; we do not have to wait until the next periodic &lt;code&gt;sysTick&lt;/code&gt; for instance.
&lt;/div&gt;

&lt;p&gt;You may have already noticed that this solution looks very similar compared to the blocking style above. In fact, it has all of its software engineering benefits but none of its drawbacks. Above Blech code is translated by the Blech compiler into an event-driven state machine implementation that only logically simulates the blocking behaviour of &lt;code&gt;await&lt;/code&gt; for the software developer while your code actually remains reactive all the time. By this, the Blech solution effectively combines the advantages of both implementation schemes known from C.&lt;/p&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Conclusion&lt;/h4&gt;
&lt;p&gt;As a conclusion we can say that the &lt;em&gt;pseudo-blocking style&lt;/em&gt; makes it generally&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;easy&lt;/strong&gt; to fulfil software engineering principles.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;easy&lt;/strong&gt; to fulfil constraints of the embedded domain.&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;

&lt;h2 id=&#34;concurrency-in-blech&#34;&gt;Concurrency in Blech&lt;/h2&gt;
&lt;p&gt;Concurrency is one of the key concerns in embedded programming. The traditional, asynchronous execution style of concurrent threads is known to induce a line-up of engineering problems such as race conditions, data inconsistencies, potential deadlocks and non-deterministic runtime behaviour. In Blech, however, all these issues are eliminated by language design due to the synchronous model of computation.&lt;/p&gt;
&lt;p&gt;Let us slightly extend above example. We want to make an LED blink on every system tick, e.g. every millisecond, while a buffer transmission is in progress. At this point, we are aware that blinking an LED with such a high frequency is generally not useful since it is not visible for the human eye. Here, we just use it for demonstration purpose to show how easy it is to express concurrent behaviour by taking advantage of Blech&amp;rsquo;s &lt;code&gt;cobegin&lt;/code&gt; statement:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-blech&#34; data-lang=&#34;blech&#34;&gt;activity SendBufferBlinking (buf: [LEN]nat8, len: nat16, sysTick: bool)(led: bool)
    cobegin   // Buffer transmission.
        run SendBuffer(buf, len)
    with weak // LED flashing.
        repeat
            led = false
            await sysTick
            led = true
            await sysTick
        end
    end
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In &lt;code&gt;SendBufferBlinking&lt;/code&gt;, we just need to run the existing code of &lt;code&gt;SendBuffer&lt;/code&gt; in one trail of the &lt;code&gt;cobegin&lt;/code&gt; and add a second, concurrent trail that is responsible for flashing the LED &amp;ndash; that&amp;rsquo;s it. The second trail is &lt;code&gt;weak&lt;/code&gt; so that it will be aborted as soon as the buffer transmission in the first trail has been completed. Note that &lt;code&gt;sysTick&lt;/code&gt; is a new input which provides the system tick event for switchting the LED on and off.&lt;/p&gt;
&lt;h3 id=&#34;concurrency-versus-single-threaded-c-code----a-contradiction&#34;&gt;Concurrency versus single-threaded C code &amp;ndash; a contradiction?&lt;/h3&gt;
&lt;p&gt;At this point, when people read that any Blech program is compiled into &lt;em&gt;single-threaded&lt;/em&gt; C code, they are sometimes slightly confused. On the one hand, Blech advertises language level support for describing concurrent behaviour but, at the same time, it produces sequential, single-threaded code only. So how can that even work?&lt;/p&gt;
&lt;p&gt;In order to understand this we have to distinguish between two different designs of concurrency. First, &lt;em&gt;physical concurrency&lt;/em&gt; aims to increase reliability and / or performance by running software on real parallel or distributed hardware platforms, e.g. multi-core architectures, at the same time. Second, &lt;em&gt;logical concurrency&lt;/em&gt; aims to provide a convenient and natural way to compose a system as a set of parallel, cooperating components. Physical and logical concurrency can be the same &amp;ndash; but they do not have to!&lt;/p&gt;
&lt;p&gt;Blech, in its current development state, provides support for logical concurrency only. At a first glance, this might look like a major limitation compared to conventional solutions in which the notion of &lt;em&gt;threads&lt;/em&gt; allows to run several lines of execution on different processors at the same time. On closer inspection, however, it becomes apparent that this is actually not the case.&lt;/p&gt;
&lt;h3 id=&#34;single-core-applications&#34;&gt;Single-core applications&lt;/h3&gt;
&lt;p&gt;A major part of today&amp;rsquo;s embedded systems still relies on single-core hardware architectures which exclude physical concurrency by design. This means that, even with asynchronous threads, it is impossible to execute two commands concurrently at the same time; the entire software is strictly sequential. As a consequence, for this significant amount of embedded use cases, Blech has no disadvantages with respect to concurrency.&lt;/p&gt;
&lt;p&gt;Quite the contrary, in Blech the sequentialization is done systematically &lt;em&gt;during compile time&lt;/em&gt; based on the synchronous model of computation &amp;ndash; no non-deterministic scheduling decisions during runtime; no arbitrary interleavings of concurrent code; no race conditions and data inconsistencies. Finally, this leads to sequential code with deterministic and reproducible runtime behaviour &amp;ndash; &lt;em&gt;the&lt;/em&gt; major advantage that makes Blech outperform conventional, asynchronous languages in the embedded domain.&lt;/p&gt;
&lt;h3 id=&#34;multi-core-applications&#34;&gt;Multi-core applications&lt;/h3&gt;
&lt;p&gt;In multi-core applications where physical concurrency is mandatory Blech is still applicable. Considering a dual-core processor for example, we can have two instances of either the same or different Blech programs where each of them is running on a different core! By this, we basically create two &lt;em&gt;synchronous islands&lt;/em&gt; &amp;ndash; so to speak &amp;ndash; that locally benefit from executing synchronous code while, from a global view, running asynchronously with respect to each other. This solution is particularly suitable for applications in which the concerns handled by core A constitute a high independence with respect to those of core B and vice versa.&lt;/p&gt;
&lt;p&gt;What we cannot express in Blech today is concurrent runtime behaviour across multiple cores. That is, the &lt;code&gt;cobegin&lt;/code&gt; statement cannot be used to describe how two concurrent trails, for example, are to be deployed, started, executed and rejoined across two different processor cores. But remember that this is not possible with threads too! The notion of threads does not say anything about how data and control flow is shared between multiple, concurrent hardware architectures.&lt;/p&gt;
&lt;p&gt;Blech&amp;rsquo;s long term goal, however, is to provide support for multi-core systems and hence physical concurrency on language level too.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Decoding the DCF77 signal with Blech</title>
      <link>https://www.blech-lang.org/blog/2020/06/15/decoding-the-dcf77-signal-with-blech/</link>
      <pubDate>Mon, 15 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.blech-lang.org/blog/2020/06/15/decoding-the-dcf77-signal-with-blech/</guid>
      <description>
        
        
        &lt;h2 id=&#34;what-is-dcf77&#34;&gt;What is DCF77?&lt;/h2&gt;
&lt;p&gt;DCF77 is a longwave radio signal which is widely used in Germany for time synchronization of clocks and watches. The signal transmitter is located in Mainflingen (Germany) and controlled by the Physikalisch-Technische Bundesanstalt (PTB).&lt;/p&gt;
&lt;p&gt;Information about the current time and date are modulated in a binary fashion onto a 77.5kHz radio carrier signal. On each second a so called &lt;em&gt;second mark&lt;/em&gt; is transmitted by reducing the carrier power for a certain amount of time. The duration of the reduction encodes either a &lt;em&gt;binary zero&lt;/em&gt; (100ms) or a &lt;em&gt;binary one&lt;/em&gt; (200ms). After a complete time code &amp;ndash; a sequence of 59 bits &amp;ndash; the process is repeated every full minute. For the 60th second there is no level change. This gap aids as a &lt;em&gt;synchronization mark&lt;/em&gt; for indicating the end of the current time code.&lt;/p&gt;
&lt;p&gt;Please refer to the &lt;a href=&#34;https://www.ptb.de/cms/en/ptb/fachabteilungen/abt4/fb-44/ag-442/dissemination-of-legal-time/dcf77.html&#34; target=&#34;_blank&#34;&gt;homepage of the PTB&lt;/a&gt;
 for further details about the technical setup and the time code of DCF77.&lt;/p&gt;
&lt;h2 id=&#34;application-example-dcf77-decoder&#34;&gt;Application example: DCF77 decoder&lt;/h2&gt;
&lt;p&gt;Our goal is to implement a simple DCF77 decoder based on a &lt;a href=&#34;https://www.st.com/en/evaluation-tools/stm32f4discovery.html&#34; target=&#34;_blank&#34;&gt;STM32F4DISCOVERY&lt;/a&gt;
 board. For the user interface we use the on-board LEDs and push button. The application shall behave as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;After power-up the application waits until the DCF77 signal is stable. During this time all LEDs are turned on.&lt;/li&gt;
&lt;li&gt;When the signal ist stable the decoding process starts automatically. All LEDs are turned off.&lt;/li&gt;
&lt;li&gt;While the decoding is running the blue LED visualizes the current level of the time signal. If the signal is &lt;code&gt;HIGH&lt;/code&gt; the LED is turned off and vice versa. This means whenever a new second mark has been received the LED lights up for 100 or 200 milliseconds.&lt;/li&gt;
&lt;li&gt;As soon as the synchronization mark has been captured the orange LED is turned on. This shows that capturing the time code is now actually in progress.&lt;/li&gt;
&lt;li&gt;Finally, if the decoding has been successfully completed the green LED lights up while the orange one goes off. In case of an error the decoding stops immediately and the red LED is turned on.&lt;/li&gt;
&lt;li&gt;Irrespective of success or error the user has to press the button in order to start a new decoding process.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In order to receive the DCF77 time signal an additional receiver module &amp;ndash; similar to &lt;a href=&#34;https://www.reichelt.de/dcf-77-receiver-module-dcf77-modul-p57772.html?&amp;amp;nbc=1&#34; target=&#34;_blank&#34;&gt;this&lt;/a&gt;
 one &amp;ndash; is required. It basically receives and transforms the radio signal into a digital &lt;a href=&#34;https://en.wikipedia.org/wiki/Transistor%E2%80%93transistor_logic&#34; target=&#34;_blank&#34;&gt;low-voltage TTL&lt;/a&gt;
 signal used as input for the microcontroller. The complete hardware setup is shown below.&lt;/p&gt;







&lt;div class=&#34;card rounded p-2 td-post-card mb-4 mt-4&#34; style=&#34;max-width: 610px&#34;&gt;
	&lt;img class=&#34;card-img-top&#34; src=&#34;https://www.blech-lang.org/blog/2020/06/15/decoding-the-dcf77-signal-with-blech/hw_setup_hu079e24572fecd1035cc0e27f9fc88fc8_4204382_600x0_resize_q75_catmullrom.jpg&#34; width=&#34;600&#34; height=&#34;338&#34;&gt;
	
	&lt;div class=&#34;card-body px-0 pt-2 pb-0&#34;&gt;
		&lt;p class=&#34;card-text&#34;&gt;
Hardware setup of the DCF77 decoder: Discovery board (top) and RF receiver module with antenna (bottom).
&lt;small class=&#34;text-muted&#34;&gt;&lt;br/&gt;Photo: Matthias Terber / CC-BY-SA&lt;/small&gt;&lt;/p&gt;
	&lt;/div&gt;
	
&lt;/div&gt;
&lt;p&gt;Jumper wires are used to connect the receiver module to the discovery board as follows:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;#&lt;/th&gt;
&lt;th&gt;Pin (RF Module)&lt;/th&gt;
&lt;th&gt;Pin (Discovery Board)&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Wire&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;GND&lt;/td&gt;
&lt;td&gt;Ground&lt;/td&gt;
&lt;td&gt;blue&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Signal&lt;/td&gt;
&lt;td&gt;PB7&lt;/td&gt;
&lt;td&gt;DCF77 Signal&lt;/td&gt;
&lt;td&gt;green&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;VDD&lt;/td&gt;
&lt;td&gt;Supply Voltage&lt;/td&gt;
&lt;td&gt;red&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Note that &lt;em&gt;PB7&lt;/em&gt; is a simple GPIO configured as digital input. By connecting an oscilloscope to PB7 we check that the receiver module is working as expected. The scope visualizes how the DCF77 bits literally &amp;ldquo;fly&amp;rdquo; &amp;ndash; so to speak &amp;ndash; into the microcontroller:&lt;/p&gt;







&lt;div class=&#34;card rounded p-2 td-post-card mb-4 mt-4&#34; style=&#34;max-width: 610px&#34;&gt;
	&lt;img class=&#34;card-img-top&#34; src=&#34;https://www.blech-lang.org/blog/2020/06/15/decoding-the-dcf77-signal-with-blech/scope_hub36a3150171d15fb70dc7d6eab6ef70f_1185503_600x0_resize_catmullrom_2.png&#34; width=&#34;600&#34; height=&#34;360&#34;&gt;
	
	&lt;div class=&#34;card-body px-0 pt-2 pb-0&#34;&gt;
		&lt;p class=&#34;card-text&#34;&gt;
Oszilloscope capture of the DCF77 time signal on GPIO PB7.
&lt;small class=&#34;text-muted&#34;&gt;&lt;br/&gt;Photo: Matthias Terber / CC-BY-SA&lt;/small&gt;&lt;/p&gt;
	&lt;/div&gt;
	
&lt;/div&gt;
&lt;p&gt;We can also see the synchronization mark (&lt;code&gt;SYNC&lt;/code&gt;) in which the 60th low pulse is omitted. This is the delimiter between the current bit sequence and the following. Finally, the discovery board communicates via USB with the &lt;a href=&#34;https://www.st.com/en/development-tools/stm32cubeide.html&#34; target=&#34;_blank&#34;&gt;software IDE&lt;/a&gt;
 on the development machine for code flashing and debugging.&lt;/p&gt;
&lt;h2 id=&#34;implementation-outline&#34;&gt;Implementation outline&lt;/h2&gt;
&lt;p&gt;In this section we outline the decoder implementation, thereby focusing on the Blech application part and its integration into the C execution environment. The complete source code project can be found &lt;a href=&#34;https://github.com/mterber/blech-dcf77.git&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;
. Two files are of particular interest:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mterber/blech-dcf77/blob/master/Core/Src/main.c&#34; target=&#34;_blank&#34;&gt;main.c&lt;/a&gt;
 &amp;ndash; the main file of the C execution environment.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mterber/blech-dcf77/blob/master/Core/Blech/control.blc&#34; target=&#34;_blank&#34;&gt;control.blc&lt;/a&gt;
 &amp;ndash; the Blech application part.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;interface-between-c-and-blech&#34;&gt;Interface between C and Blech&lt;/h3&gt;
&lt;p&gt;The Blech application part is responsible for the following concerns:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Decoding the DCF77 signal &amp;ndash; requires the time signal level as &lt;em&gt;input&lt;/em&gt; from C to Blech.&lt;/li&gt;
&lt;li&gt;Controlling the LEDs &amp;ndash; requires the state of the blue, orange, green and red LED as &lt;em&gt;output&lt;/em&gt; from Blech to C.&lt;/li&gt;
&lt;li&gt;Reacting to button presses &amp;ndash; requires the state of the user button as &lt;em&gt;input&lt;/em&gt; from C to Blech.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The corresponding signature of the Blech entry point activity looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-blech&#34; data-lang=&#34;blech&#34;&gt;// @param[in]   dcf77   The DCF77 signal level (true = &#39;HIGH&#39;).
// @param[in]   btn     The user button state (true = &#39;PRESSED&#39;).
// @param[out]  leds    The LED states (true = &#39;ON&#39;).
@[EntryPoint]
activity Main (dcf77: bool, btn: bool) (leds: LedStates)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note that &lt;code&gt;LedStates&lt;/code&gt; is a user-defined structure in Blech which contains the state information of the four LEDs. This is done to make the interface less verbose, thereby improving the readability.&lt;/p&gt;
&lt;h3 id=&#34;execution-scheme-and-integration-of-blech&#34;&gt;Execution scheme and integration of Blech&lt;/h3&gt;
&lt;p&gt;The execution progress of a Blech program advances based on &lt;em&gt;ticks&lt;/em&gt;. A tick can be any sporadic or periodic event- or time-based trigger provided by the underlying hard- and software platform. For decoding DCF77 it is a common approach to periodically sample the time signal and measure the duration of the level changes. This means that the entire decoding logic is &lt;em&gt;purely time-driven&lt;/em&gt; based on a cyclic timer tick.&lt;/p&gt;
&lt;p&gt;We follow this approach and execute the Blech application part every 10 milliseconds. This leads to a sample rate of 100Hz which is sufficiently fast in order to distinguish between a binary zero, a binary one and the synchronization mark. For the periodic execution, we take advantage of a simple delay function (&lt;code&gt;HAL_Delay&lt;/code&gt;) provided by the microcontroller&amp;rsquo;s driver library. An outline of &lt;code&gt;main.c&lt;/code&gt; is shown below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;#34;blech/control.h&amp;#34;      // Include C code generated from Blech.&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// ... init system ...
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#000&#34;&gt;blc_blech_control_init&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;();&lt;/span&gt;   &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// Init Blech execution context.
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#000&#34;&gt;perform_reaction&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;();&lt;/span&gt;         &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// Run boot reaction. 
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;while&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;HAL_Delay&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;          &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// Suspend Blech execution for 10ms.
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;	    &lt;span style=&#34;color:#000&#34;&gt;perform_reaction&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;();&lt;/span&gt;     &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// Run next reaction.
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;perform_reaction&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// ... read inputs (DCF77 level + button state) ...
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#000&#34;&gt;blc_blech_control_tick&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;dcf77&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;btn&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;leds&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;   &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// Actually run Blech.
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// ... write outputs (new LED states) ...
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Basically, the main function initializes the system and the Blech execution context. It performs the very first reaction in Blech &amp;ndash; the &lt;em&gt;boot reaction&lt;/em&gt; &amp;ndash; and enters the infinite loop. Inside the loop, we repeatedly wait for the next tick to occur and perform the next reaction in Blech accordingly. The actual call of &lt;code&gt;blc_blech_control_tick&lt;/code&gt; is wrapped in &lt;code&gt;perform_reaction&lt;/code&gt; in order to encapsulate all the required steps for reading the Blech inputs and writing the Blech outputs.&lt;/p&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Note&lt;/h4&gt;
In this application, the Blech part is entirely time-triggered. All &lt;code&gt;await&lt;/code&gt; statements react in response to the periodic 10 milliseconds tick. Thus, calling &lt;code&gt;await true&lt;/code&gt; &amp;ndash; which means &amp;ldquo;await the next Blech tick&amp;rdquo; &amp;ndash; will suspend the running trail for the next 10 milliseconds. This allows to implement a time-driven counter for measuring durations, e.g. of the signal level changes (see &lt;a href=&#34;#capturing-the-synchronization-mark-and-the-bits&#34;&gt;here&lt;/a&gt;
).
&lt;/div&gt;

&lt;p&gt;Keep in mind that calling &lt;code&gt;HAL_Delay&lt;/code&gt; is generally not a good solution with respect to efficiency. Internally, this function actively polls a variable which gets updated by the system tick timer. This means that the CPU is continously running at full speed and the main thread is blocked for anything else. A better approach would be to switch the microcontroller into sleep mode and implement a wakeup strategy based on interrupts for each tick. We are going to show this in another blog post. In this example, however, we follow the simple delay approach for the sake of simplicity.&lt;/p&gt;
&lt;h3 id=&#34;hierarchical-software-structure&#34;&gt;Hierarchical software structure&lt;/h3&gt;
&lt;p&gt;The entire complexity of the example application is broken down into seven &lt;em&gt;activites&lt;/em&gt; &amp;ndash; the reactive code abstraction entities in Blech &amp;ndash; as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Main&lt;/code&gt; &amp;ndash; This is the entry point and top level of the Blech program. It defines the interface between Blech and C (see &lt;a href=&#34;#execution-scheme-and-integration-of-blech&#34;&gt;here&lt;/a&gt;
) and describes the application behaviour on a high abstraction level.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AwaitStableSignal&lt;/code&gt; &amp;ndash; This waits for the DCF77 time signal to become stable. When the system is powered up the RF receiver module needs some time to stabilize its oscillator and supply voltage. During this time the signal is not reliable.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Visualize&lt;/code&gt; &amp;ndash; This visualizes the DCF77 signal level using the blue LED.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Decode&lt;/code&gt; &amp;ndash; This actually decodes the DCF77 time signal.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CaptureTimeInfo&lt;/code&gt; &amp;ndash; This captures and decodes one time code, means one sequence of 59 bits which is transmitted every minute.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CaptureBit&lt;/code&gt; &amp;ndash; This captures one second mark and evaluates it to either a binary zero or a binary one.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CaptureSync&lt;/code&gt;&amp;ndash; This captures the synchronization mark.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following graph depicts the hierarchical decomposition and call dependency of the above activities. In particular, it shows that the DCF77 decoding relies on capturing the time code which, in its turn, relies on capturing the synchronization mark and the bits.&lt;/p&gt;







&lt;div class=&#34;card rounded p-2 td-post-card mb-4 mt-4&#34; style=&#34;max-width: 410px&#34;&gt;
	&lt;img class=&#34;card-img-top&#34; src=&#34;https://www.blech-lang.org/blog/2020/06/15/decoding-the-dcf77-signal-with-blech/activity_tree_hu8eb9351a76627fa7002efdf26ac3730a_44992_400x0_resize_catmullrom_2.png&#34; width=&#34;400&#34; height=&#34;320&#34;&gt;
	
	&lt;div class=&#34;card-body px-0 pt-2 pb-0&#34;&gt;
		&lt;p class=&#34;card-text&#34;&gt;
Hierarchical call structure of activities.
&lt;small class=&#34;text-muted&#34;&gt;&lt;br/&gt;Photo: Matthias Terber / CC-BY-SA&lt;/small&gt;&lt;/p&gt;
	&lt;/div&gt;
	
&lt;/div&gt;
&lt;p&gt;Note how easy it is to reuse the same piece of reactive code for different concerns in Blech &amp;ndash; &lt;code&gt;CaptureBit&lt;/code&gt; is used in &lt;code&gt;AwaitStableSignal&lt;/code&gt; and &lt;code&gt;CaptureTimeInfo&lt;/code&gt; likewise. In the former, we repeatedly run &lt;code&gt;CaptureBit&lt;/code&gt; until three consecutive bits have been successfully captured. Only then we consider the time signal to be stable.&lt;/p&gt;
&lt;h3 id=&#34;the-applications-top-level&#34;&gt;The application&amp;rsquo;s top-level&lt;/h3&gt;
&lt;p&gt;We dig into the implementation starting at the top level. Inside the &lt;code&gt;Main&lt;/code&gt; activity, the program first awaits a stable DCF77 signal by running &lt;code&gt;AwaitStableSignal&lt;/code&gt;. This suspends the control flow until the signal is reliable. A &lt;em&gt;function&lt;/em&gt; call is used before to turn on all LEDs.&lt;/p&gt;
&lt;p&gt;After that, the infinite &lt;code&gt;repeat&lt;/code&gt; loop is entered and all LEDs are turned off. By taking advantage of &lt;code&gt;cobegin&lt;/code&gt;, the main application trail is split into two concurrent trails. While the first one runs &lt;code&gt;Decode&lt;/code&gt; for performing the DCF77 decoding, the second one executes &lt;code&gt;Visualize&lt;/code&gt; in order to concurrently reflect the time signal level on the blue LED. Note that the second trail is marked as &lt;code&gt;weak&lt;/code&gt;. This means that, as soon as the first trail terminates, the second trail will be aborted &amp;ndash; both trails rejoin their control paths and continue as one. By this, it is pretty easy to describe that visualizing the signal level shall be done only while the decoding is running.&lt;/p&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Note&lt;/h4&gt;
Due to the synchronous computation model, abortion of trails is done only at the end of the current reaction when all trails have finished their job and are waiting for the next tick. Thus, trails are particularly &lt;em&gt;not&lt;/em&gt; interrupted at an arbitrary code location because this would lead to non-deterministic runtime behaviour!
&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-blech&#34; data-lang=&#34;blech&#34;&gt;@[EntryPoint]
activity Main (dcf77: bool, btn: bool) (leds: LedStates)
    ledsAllOn()(leds)
    run AwaitStableSignal(dcf77)

    repeat
        ledsAllOff()(leds)      // Turn off all LEDs.
    
        var ti: TimeInfo        // The decoded time information.
        var success: bool

        cobegin
            success = run Decode(dcf77)(ti, leds.orange)
        with weak
            run Visualize(dcf77)(leds.blue)
        end

        ledsAllOff()(leds)      // Turn off all LEDs.

        if success then
            leds.green = true   // Decode() succeeded -&amp;gt; green LED on.
            // ... use &#39;ti&#39; for synchronizing the local clock ...
        else
            leds.red = true     // Decode() failed -&amp;gt; red LED on.
        end

        await btn               // Await user button press.
    end
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;After decoding has been finished, all LEDs are turned off again and we check for success or error. On success, the green LED is turned on while on error the red LED is turned on. Finally, the Blech program suspends until the push button is pressed by the user. Once this is done the whole process restarts.&lt;/p&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Note&lt;/h4&gt;
To keep the example simple, the button state is provided &lt;em&gt;as-is&lt;/em&gt; to the Blech program. This means we just pass the current value of the corresponding GPIO input register. Usually, however, it is common practice to apply a filter approach in software in order to suppress &lt;a href=&#34;https://en.wikipedia.org/wiki/Switch#Contact_bounce&#34; target=&#34;_blank&#34;&gt;bouncing&lt;/a&gt;
. In another blog post we are going to show how this can be done in Blech.
&lt;/div&gt;

&lt;h3 id=&#34;visualizing-the-dcf77-signal&#34;&gt;Visualizing the DCF77 signal&lt;/h3&gt;
&lt;p&gt;Reflecting the time signal level on the LED is a pretty simple task in Blech. We establish an infinite loop which alternates between the signal levels. First, it awaits the high level for switching off the LED. Second, it awaits the low level for switching on the same LED. Third, the whole process repeats &amp;ndash; that&amp;rsquo;s it.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-blech&#34; data-lang=&#34;blech&#34;&gt;activity Visualize (dcf77: bool) (ledDcf77: bool)
    repeat
        await dcf77         // Await rising edge.
        ledDcf77 = false    // Turn off LED.
        await not dcf77     // Await falling edge.
        ledDcf77 = true     // Turn on LED.
    end
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note that &lt;code&gt;Visualize&lt;/code&gt; does not even have to know which of the four LEDs it is actually turning on and off. There is no hardware dependency and all the required logic is encapsulated in an activity. Thus, we could easily select another LED or execute multiple instances of &lt;code&gt;Visualize&lt;/code&gt; concurrently in order to show the signal level on several LEDs at the same time.&lt;/p&gt;
&lt;h3 id=&#34;capturing-the-synchronization-mark-and-the-bits&#34;&gt;Capturing the synchronization mark and the bits&lt;/h3&gt;
&lt;p&gt;For this functionality, we take advantage of the fact that the entire Blech application is purely time-triggered by the 10 milliseconds tick (see &lt;a href=&#34;#execution-scheme-and-integration-of-blech&#34;&gt;here&lt;/a&gt;
). Based on that, we establish a time-based counter &lt;code&gt;len&lt;/code&gt; which measures the duration of the signal&amp;rsquo;s &lt;code&gt;HIGH&lt;/code&gt; level. Therefore, &lt;code&gt;len&lt;/code&gt; is incremented on each (10 milliseconds) tick using &lt;code&gt;await true&lt;/code&gt; in a loop. Once that counter has reached the required value (&amp;gt; 1200ms) we detect the synchronization mark and exit the loop.&lt;/p&gt;
&lt;p&gt;If the signal level goes &lt;code&gt;LOW&lt;/code&gt; during the measurement the process has to be resetted. For this, we use the &lt;code&gt;when ... reset&lt;/code&gt; block in Blech which causes the contained code to restart from the first line if the given condition is met. So in this case the code will jump back to &lt;code&gt;var len: nat16 = 0&lt;/code&gt; as soon as the level drops.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-blech&#34; data-lang=&#34;blech&#34;&gt;activity CaptureSync (dcf77: bool)
    // Perform the measurement and restart if the level drops meanwhile.
    when not dcf77 reset
        var len: nat16 = 0
        repeat
            await true // Await next sys tick.
            len = len + 1
        until len &amp;gt; DCF77_SYNC_LEN end
    end
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The implementation of &lt;code&gt;CaptureBit&lt;/code&gt; basically follows the same approach. It uses a time-driven counter for measuring the duration of the &lt;code&gt;LOW&lt;/code&gt; level instead. For this reason, we do not exemplify it in more detail here.&lt;/p&gt;
&lt;h3 id=&#34;capture-and-decode-the-time-information&#34;&gt;Capture and decode the time information&lt;/h3&gt;
&lt;p&gt;Implementing the time information capture based on &lt;code&gt;CaptureSync&lt;/code&gt; and &lt;code&gt;CaptureBit&lt;/code&gt; becomes a trivial task. First, we capture the synchronization mark. Before and after that we turn off and on the associated LED (orange) respectively. Second, we enter the &lt;code&gt;while&lt;/code&gt; loop in which we collect the 59 time code bits by repeatedly calling &lt;code&gt;CaptureBit&lt;/code&gt;. Each successfully received bit is passed to &lt;code&gt;processBit&lt;/code&gt; in order to update the gathered time information in &lt;code&gt;ti&lt;/code&gt;. This means that decoding the DCF77 signal actually happens bit-wise on-the-fly. Finally, &lt;code&gt;CaptureTimeInfo&lt;/code&gt; terminates, thereby returning the success status and the decoded time information to the caller.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-blech&#34; data-lang=&#34;blech&#34;&gt;activity CaptureTimeInfo (dcf77: bool)(ti: TimeInfo, ledSync: bool) returns bool
    ledSync = false // Turn off LED.
    run CaptureSync(dcf77)
    ledSync = true  // Turn on LED.

    var success: bool = true
    var parity: nat8 = 0
    var i: nat8 = 0
    
    while success and (i &amp;lt;= 58) repeat // [0, 58]
        var bit: nat8
        success = run CaptureBit(dcf77)(bit)
        
        if success then
            success = processBit(i, bit)(parity, ti)
        end

        i = i + 1
    end

    ledSync = false // Turn off LED.

    return success
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The job of &lt;code&gt;Decode&lt;/code&gt; is to retrieve two consecutive time codes (&lt;code&gt;tmp&lt;/code&gt; and &lt;code&gt;ti&lt;/code&gt;) and apply a simple validity check by comparing them. A common approach is to check whether the second timestamp (&lt;code&gt;ti&lt;/code&gt;) is exactly one minute ahead of the first one (&lt;code&gt;tmp&lt;/code&gt;). If that is the case the second one is considered valid and returned to the caller &amp;ndash; the decoding is done.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-blech&#34; data-lang=&#34;blech&#34;&gt;activity Decode (dcf77: bool) (ti: TimeInfo, ledSync: bool) returns bool
    var success: bool
    var tmp: TimeInfo

    success = run CaptureTimeInfo(dcf77)(tmp, ledSync)  // First capture.

    if not success then
        return false
    end

    success = run CaptureTimeInfo(dcf77)(ti, ledSync)   // Second capture.

    if not success then
        return false
    end

    return isTimeInfoValid(tmp, ti) // Check plausibility.
end
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The following video shows the DCF77 decoder in action. In focus are the four color LEDs and the user button on the left side. Watch the video to get in impression about how above Blech activities control the runtime behaviour.
&lt;a href=&#34;https://youtu.be/KaX_LRlV4oI&#34; target=&#34;_blank&#34;&gt;






&lt;div class=&#34;card rounded p-2 td-post-card mb-4 mt-4&#34; style=&#34;max-width: 610px&#34;&gt;
	&lt;img class=&#34;card-img-top&#34; src=&#34;https://www.blech-lang.org/blog/2020/06/15/decoding-the-dcf77-signal-with-blech/vid_thumb_huc0fefdc87aee5b67d4c7c252c53ee7a9_156721_600x0_resize_q75_catmullrom.JPG&#34; width=&#34;600&#34; height=&#34;338&#34;&gt;
	
	&lt;div class=&#34;card-body px-0 pt-2 pb-0&#34;&gt;
		&lt;p class=&#34;card-text&#34;&gt;
    Video: The DCF77 decoder in action.
    &lt;small class=&#34;text-muted&#34;&gt;&lt;br/&gt;Photo: Matthias Terber / CC-BY-SA&lt;/small&gt;&lt;/p&gt;
	&lt;/div&gt;
	
&lt;/div&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;Above implementation outline shows that implementing DCF77 decoding is a straightforward job in Blech. The combination of the synchronous execution model and activities allows to divide the entire decoding complexity into smaller parts that are easier to program, comprehend and maintain. In particular, it is possible to compose these reactive functionalities in a hierarchical top-down fashion. All concurrent behaviour is deterministic by design and does not require any mutexing.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: The purpose of Blech</title>
      <link>https://www.blech-lang.org/blog/2020/05/27/the-purpose-of-blech/</link>
      <pubDate>Wed, 27 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.blech-lang.org/blog/2020/05/27/the-purpose-of-blech/</guid>
      <description>
        
        
        &lt;h2 id=&#34;why-blech&#34;&gt;Why Blech?&lt;/h2&gt;
&lt;p&gt;There is a huge difference between the environments of a desktop, a server, or a mobile application 
and a typical application in the embedded domain.
Moreover, the embedded industry is itself huge &amp;ndash; including automotive, aerospace, robotics, medical technology, rail, IoT, home appliances, power tools.&lt;/p&gt;
&lt;!-- Just because it&#39;s &#34;huge&#34; doesn&#39;t of itself motivate anything yet - how about the following? --&gt; 
&lt;p&gt;Mainstream discourse about programming, with its traditional IT focus, has tended to ignore these issues,
with the result that the size and scope of these problems are seldom discussed or understood outside the confines
of academic circles or highly proprietary walled garden approaches.&lt;/p&gt;
&lt;p&gt;We want to change that.&lt;/p&gt;
&lt;h3 id=&#34;the-embedded-domain-is-tough&#34;&gt;The embedded domain is tough&lt;/h3&gt;
&lt;p&gt;Embedded applications usually run on dedicated hardware to interact with a specific physical environment.
More often than not, the hardware is resource-constrained in terms of memory and processing power. 
To fulfill safety requirements, the code needs to be safe, secure, reliable, and portable.
Applications must be reactive because of realtime requirements, and deterministic to make reactions predictable and repeatable under test.&lt;/p&gt;
&lt;p&gt;This mix of requirements imposes severe constraints on developers in terms of how to program their application.&lt;/p&gt;
&lt;p&gt;In principle, there are two ways to organize the code: event-driven or threaded.&lt;/p&gt;
&lt;p&gt;Event-driven functions cannot rely on a stack to maintain the state between consecutive events in a task. 
The programmer has to maintain the state across multiple events, and to manually combine these events into the required flow of control.
Therefore, event-driven programs can be very efficient in terms of memory footprint and they do not need scheduling.
The disadvantage is that they are hard to write and even harder to read and reason about.&lt;/p&gt;
&lt;p&gt;Threaded functions are easier to write and comprehend, since the program can be expressed as a sequence of actions, waiting for asynchronous input if needed.
The state between steps is preserved on the stack.
The big disadvantage is that each threaded function needs to allocate its maximum possible required stack during its existence, 
and the composition of threaded functions creates the need for pre-emptive or cooperative scheduling at run-time, which either is non-deterministic or non-reactive.&lt;/p&gt;
&lt;p&gt;As a consequence, applications are often written in an event-driven style.&lt;/p&gt;
&lt;h3 id=&#34;c-programming-is-like-defusing-a-bomb&#34;&gt;C programming is like defusing a bomb&lt;/h3&gt;
&lt;p&gt;Many areas in software development have benefitted from improvements made to programming languages. 
Embedded systems are an exception to this. 
C remains the de-facto standard for development, although there are many flaws that need to be mitigated by tight coding conventions and static analysis tools.&lt;/p&gt;
&lt;p&gt;Of course, there are several languages like Ada, C++, or Rust that have the potential to improve certain aspects of embedded development.
Due to its backwards compatability with C and its maturity, C++ is often preferred and used in many embedded projects.
Nevertheless, C++ as well as older (Ada) and newer (Rust) developments are all general-purpose languages, which only improve certain programming aspects and do not really reduce the complexity of embedded applications.&lt;/p&gt;
&lt;p&gt;Blech is different.&lt;/p&gt;
&lt;h2 id=&#34;what-is-blech&#34;&gt;What is Blech?&lt;/h2&gt;
&lt;p&gt;Blech is a language that is specifically designed for safety- and realtime-critical, reactive, embedded programming. 
The cornerstones of Blech are its model of computation (MoC) and its simple integration with C.
Being a new language, it benefits from the progress in programming languages over the past 4 decades. 
With its domain focus, it is designed to guarantee important properties via the compiler.&lt;/p&gt;
&lt;h3 id=&#34;the-blech-model-of-computation&#34;&gt;The Blech model of computation&lt;/h3&gt;
&lt;p&gt;Blech is a synchronous language.&lt;/p&gt;
&lt;p&gt;In a nutshell, the synchronous model of computation allows us to write threaded functions, which are compiled into an efficiently executable event-driven code that is deterministic.
For this purpose, it incorporates the step-wise execution of typical realtime, reactive applications into the language.&lt;/p&gt;
&lt;p&gt;Blech allows us to write subprograms, called &lt;em&gt;activities&lt;/em&gt;, that execute in &lt;em&gt;steps&lt;/em&gt;, as a sequence of actions which pause once a step is finished.
A synchronous language regards the trigger events that initiate these steps as the &lt;em&gt;ticks&lt;/em&gt; of a clock. 
The ticks can either be periodically triggered by time, or aperiodically triggered by events.
The synchronous model of computation (MoC) assumes a minimum inter-arrival time between ticks, which defines the maximum execution time in order to complete a step.
Based on this assumption, which is very suitable for realtime-critical, reactive applications, the programming model can be abstracted to a perfect model, where every step is executed immediately and runs to completion, before the next tick occurs.&lt;/p&gt;
&lt;p&gt;A Blech activity is a sequential control flow of statements that finishes a step by pausing at an &lt;em&gt;await&lt;/em&gt; statement. 
The await statement guards the continuation of the control flow with a condition, which is evaluated as soon as the next step is triggered by a tick.
These subprograms can be composed sequentially via normal control flow and concurrently via synchronous parallel composition.
The compiler guarantess deterministic execution of concurrently composed subprograms.&lt;/p&gt;
&lt;p&gt;Underneath the hood, a concurrently composed application compiles to a sequential program that is driven by a clock.
A clock can be anything that drives a reactive application, for example&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a main loop&lt;/li&gt;
&lt;li&gt;a time-triggering environment&lt;/li&gt;
&lt;li&gt;an event-triggering environment&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This MoC regains the simplicity of threaded programs, the composability of sequential subprograms, and the efficiency of event-driven program organisation.&lt;/p&gt;
&lt;h3 id=&#34;blech-is-a-companion-to-cc&#34;&gt;Blech is a companion to C/C++&lt;/h3&gt;
&lt;p&gt;Blech compiles to &lt;em&gt;clean&lt;/em&gt; C - the common subset of C and C++.
Therefore, Blech programs can easily be integrated into existing embedded projects.&lt;/p&gt;
&lt;p&gt;Embedded hardware usually comes with driver software written in C.
Useful libraries written in C/C++ already exist, for almost everything.
There is no need to rewrite everything in Blech, existing C libraries can be used from Blech programs directly.&lt;/p&gt;
&lt;p&gt;This 2-way integration simplifies the necessary separation between&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;an asynchronous environment that drives the Blech program&lt;/li&gt;
&lt;li&gt;and the synchronous application written in Blech with the support of further C/C++ libraries.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Blech is a German word and roughly translates as bare metal.
As its name suggests, a Blech program can run on pretty much anything:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;directly on &amp;ldquo;the Blech&amp;rdquo; in an embedded device,&lt;/li&gt;
&lt;li&gt;on top of a realtime OS,&lt;/li&gt;
&lt;li&gt;as a safety-critical component integrated via some middleware,&lt;/li&gt;
&lt;li&gt;in combination with a simulation model.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;blech-is-made-for-the-embedded-domain&#34;&gt;Blech is made for the embedded domain&lt;/h3&gt;
&lt;p&gt;Here is a list of requirements for Blech that has found its way into the language design:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;time-driven and event-driven program execution,&lt;/li&gt;
&lt;li&gt;predictable and deterministic semantics,&lt;/li&gt;
&lt;li&gt;synchronous concurrency,&lt;/li&gt;
&lt;li&gt;hard real-time,&lt;/li&gt;
&lt;li&gt;predictable memory usage and execution time,&lt;/li&gt;
&lt;li&gt;compile-time mechanism for structuring and variants,&lt;/li&gt;
&lt;li&gt;safe shared memory,&lt;/li&gt;
&lt;li&gt;safe type system,&lt;/li&gt;
&lt;li&gt;expressive and productive programming,&lt;/li&gt;
&lt;li&gt;a &amp;ldquo;cool&amp;rdquo; development environment.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The Blech core language is designed to resolve frequently encountered issues with C/C++.
With its domain focus and the synchronous MoC, we restrict the language to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;no global variables,&lt;/li&gt;
&lt;li&gt;no undefined behaviour,&lt;/li&gt;
&lt;li&gt;no pointer aliasing problems,&lt;/li&gt;
&lt;li&gt;no address arithmetic,&lt;/li&gt;
&lt;li&gt;no machine-dependent types,&lt;/li&gt;
&lt;li&gt;no overflow, underflow, division-by-zero,&lt;/li&gt;
&lt;li&gt;no index out of bounds,&lt;/li&gt;
&lt;li&gt;no integer promotion,&lt;/li&gt;
&lt;li&gt;no unsafe casts,&lt;/li&gt;
&lt;li&gt;no side-effects in conditions,&lt;/li&gt;
&lt;li&gt;no dynamic memory allocation,&lt;/li&gt;
&lt;li&gt;no uninitialised variables,&lt;/li&gt;
&lt;li&gt;no shadowing,&lt;/li&gt;
&lt;li&gt;no race-conditions in concurrent code,&lt;/li&gt;
&lt;li&gt;no dynamic thread generation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These properties are guaranteed by the type system and several further compile-time analyses.
Virtually anything that is usually required by embedded, realtime, or safety-oriented coding-conventions like MISRA C/C++ can be handled by the compiler.&lt;/p&gt;
&lt;h3 id=&#34;the-future&#34;&gt;The future&lt;/h3&gt;
&lt;p&gt;Blech, as currently released, is a working first step. 
The new mechanisms and the semantics for synchronous imperative programming are fully implemented.
The compiler generates clean C code.&lt;/p&gt;
&lt;p&gt;However, some of the syntactic elements are not yet translated. 
Also, a few of the above safety checks are still missing. 
Filling these gaps is a matter of effort and is done bit by bit. 
Furthermore, there is a longer roadmap to enrich the language itself. 
This requires more research and design.&lt;/p&gt;
&lt;p&gt;Currently we are working on the module system, that incorporates cycle-free dependency management of separately compilable modules into the language.
The module system will support information hiding, black-box reuse and white-box testing.
It will allow us to deliver Blech modules as pre-compiled libraries with C header files and Blech module signatures.&lt;/p&gt;
&lt;p&gt;We have planned mechanisms for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;error handling,&lt;/li&gt;
&lt;li&gt;type-safe generics with predictable code size,&lt;/li&gt;
&lt;li&gt;multi-clock programming.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Besides the already working VS Code language server plug-in we plan a minimal tool set for Blech:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a test framework for regression tests of Blech components,&lt;/li&gt;
&lt;li&gt;a build system for mixed Blech/C projects.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Due to Blech&amp;rsquo;s statically guaranteed properties and its concurrent execution determinism, development tools become possible that are otherwise difficult to create.
For example,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a time-travel debugger for concurrent and parallel programs, or&lt;/li&gt;
&lt;li&gt;a deployment support tool.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To follow upon and participate in the development visit the Blech homepage: &lt;a href=&#34;www.blech-lang.org&#34;&gt;&lt;a href=&#34;http://www.blech-lang.org&#34;&gt;www.blech-lang.org&lt;/a&gt;&lt;/a&gt;
.
The documentation, examples, and plans for the evolution of the language can be found on the website.&lt;/p&gt;
&lt;p&gt;We are convinced that Blech can substantially boost productivity and the quality of safety- and realtime-critical, reactive, embedded applications.&lt;/p&gt;
&lt;p&gt;Stay tuned or &amp;ndash; even better &amp;ndash; participate.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Blech compiler version 0.5.1</title>
      <link>https://www.blech-lang.org/blog/2020/04/21/blech-compiler-version-0.5.1/</link>
      <pubDate>Tue, 21 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.blech-lang.org/blog/2020/04/21/blech-compiler-version-0.5.1/</guid>
      <description>
        
        
        
      </description>
    </item>
    
    <item>
      <title>Blog: Blech VS Code Extension 0.5.2</title>
      <link>https://www.blech-lang.org/blog/2020/04/20/blech-vs-code-extension-0.5.2/</link>
      <pubDate>Mon, 20 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.blech-lang.org/blog/2020/04/20/blech-vs-code-extension-0.5.2/</guid>
      <description>
        
        
        
      </description>
    </item>
    
    <item>
      <title>Blog: Synchron 2019</title>
      <link>https://www.blech-lang.org/blog/2019/12/01/synchron-2019/</link>
      <pubDate>Sun, 01 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.blech-lang.org/blog/2019/12/01/synchron-2019/</guid>
      <description>
        
        
        &lt;p&gt;Blech has been presented at &lt;a href=&#34;http://synchron19.org/&#34; target=&#34;_blank&#34;&gt;Synchron 2019&lt;/a&gt;
 the 26th International Open Workshop on Synchronous Programming in Aussois, November 25-29 2019.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://synchron19.org/participants/&#34; target=&#34;_blank&#34;&gt;On Tuesday, 2019-11-26 Friedrich Gretz&lt;/a&gt;
 talked about &lt;a href=&#34;http://synchron19.org/wp-content/uploads/sites/7/2019/11/Gretz-Synchron19.pdf&#34; target=&#34;_blank&#34;&gt;Programming Blech&lt;/a&gt;
.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: WCET 2019 Keynote</title>
      <link>https://www.blech-lang.org/blog/2019/07/10/wcet-2019-keynote/</link>
      <pubDate>Wed, 10 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.blech-lang.org/blog/2019/07/10/wcet-2019-keynote/</guid>
      <description>
        
        
        &lt;p&gt;The keynote of &lt;a href=&#34;https://www.ecrts.org/archives/fileadmin/WebsitesArchiv/ecrts2019/wcet/&#34; target=&#34;_blank&#34;&gt;WCET 2019&lt;/a&gt;
 the 19th International Open Workshop on Worst-Case Execution Time Analysis, presented &lt;a href=&#34;https://www.ecrts.org/archives/fileadmin/WebsitesArchiv/ecrts2019/wcet/wcet-2019-program/index.html&#34; target=&#34;_blank&#34;&gt;Blech - a synchronous language for embedded real-time programming&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;The talk was given by Franz-Josef Grosch, &lt;a href=&#34;https://www.ecrts.org/archives/fileadmin/WebsitesArchiv/ecrts2019/wcet/&#34; target=&#34;_blank&#34;&gt;abstract&lt;/a&gt;
 and &lt;a href=&#34;https://www.ecrts.org/archives/fileadmin/WebsitesArchiv/ecrts2019/wp-content/uploads/2019/07/WCET19-Keynote.pdf&#34; target=&#34;_blank&#34;&gt;slides&lt;/a&gt;
 are available.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
