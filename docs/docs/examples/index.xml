<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blech – Blech examples</title>
    <link>https://www.blech-lang.org/docs/examples/</link>
    <description>Recent content in Blech examples on Blech</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://www.blech-lang.org/docs/examples/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Virtual Safe Lock</title>
      <link>https://www.blech-lang.org/docs/examples/virtuallock/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.blech-lang.org/docs/examples/virtuallock/</guid>
      <description>
        
        
        &lt;p&gt;This document was originally released as supplementary material for the Bosch Conference
on Software Engineering tutorial on Blech. It may be used on its own as a means
to get a first impression of the language and get a Blech project up and running. To
complete the programming assignments a Bosch XDK device is required.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;Blech_Tutorial_BoCSE2019.pdf&#34;&gt;The tutorial (pdf)&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;Code.zip&#34;&gt;Code samples (zip)&lt;/a&gt;
&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Blinker</title>
      <link>https://www.blech-lang.org/docs/examples/blinker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.blech-lang.org/docs/examples/blinker/</guid>
      <description>
        
        
        &lt;p&gt;The first community made demo for Blech is the implementation of a &lt;a href=&#34;https://github.com/frameworklabs/blinker&#34; target=&#34;_blank&#34;&gt;car’s blinker&lt;/a&gt;
 running in a simulated curses environment.
Making use of Blech&amp;rsquo;s reactive programming model and concurrent composition, this example shows how a rather complex state management logic can be decomposed into individual simple building blocks.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Stopwatch</title>
      <link>https://www.blech-lang.org/docs/examples/stopwatch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.blech-lang.org/docs/examples/stopwatch/</guid>
      <description>
        
        
        &lt;p&gt;This example illustrates synchronous control flow by means of a stopwatch: the &lt;code&gt;s&lt;/code&gt; button starts and stops the measurement of time; the &lt;code&gt;r&lt;/code&gt; button resets the watch to zero if no measurement is currently running, otherwise it shows the lap time.&lt;/p&gt;
&lt;p&gt;The example is discussed in detail in the paper &lt;a href=&#34;https://doi.org/10.1007/978-3-030-31585-6_9&#34; target=&#34;_blank&#34;&gt;“Blech, Imperative Synchronous Programming!&amp;quot;&lt;/a&gt;
.&lt;/p&gt;
&lt;p&gt;There various modifications of the example are discussed as well as some aspects of software engineering practice.
The code sample provided here implements the final result from the paper.
The provided c file and build script are tailored towards the Microsoft Windows system using the &lt;code&gt;cl&lt;/code&gt; compiler.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;CompleteStopwatch.zip&#34;&gt;Code samples (zip)&lt;/a&gt;
&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: React - a reaction test game</title>
      <link>https://www.blech-lang.org/docs/examples/react/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.blech-lang.org/docs/examples/react/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://github.com/frameworklabs/react&#34; target=&#34;_blank&#34;&gt;This example&lt;/a&gt;
 implements a reaction test game for the &lt;a href=&#34;https://m5stack.com/products/stick-c&#34; target=&#34;_blank&#34;&gt;M5StickC&lt;/a&gt;
 programmed in the Arduino environment with the help of Blech.
Source and build instructions are &lt;a href=&#34;https://github.com/frameworklabs/react&#34; target=&#34;_blank&#34;&gt;available on GitHub&lt;/a&gt;
.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s a nifty piece of work demonstrating how the state flow of the game and the passage of time can be handled in Blech.&lt;/p&gt;
&lt;p&gt;Thank you very much &lt;a href=&#34;https://github.com/frameworklabs&#34; target=&#34;_blank&#34;&gt;@frameworklabs&lt;/a&gt;
.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Decoding the DCF77 longwave time signal</title>
      <link>https://www.blech-lang.org/docs/examples/dcf77/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.blech-lang.org/docs/examples/dcf77/</guid>
      <description>
        
        
        &lt;p&gt;DCF77 is a longwave radio signal which is widely used in Germany for time synchronization of clocks and watches.&lt;/p&gt;
&lt;p&gt;This example implements the decoding of the DCF77 signal in Blech on &lt;em&gt;bare metal&lt;/em&gt; using an &lt;a href=&#34;https://www.st.com/en/evaluation-tools/stm32f4discovery.html&#34; target=&#34;_blank&#34;&gt;STM32 discovery board&lt;/a&gt;
.&lt;/p&gt;
&lt;p&gt;A &lt;a href=&#34;https://www.blech-lang.org/blog/2020/06/15/decoding-the-dcf77-signal-with-blech/&#34;&gt;blog post&lt;/a&gt;
 accompanies the implementation, which explains the implementation details and the simplicity of the structured synchronous top-down design.&lt;/p&gt;
&lt;p&gt;The sources are &lt;a href=&#34;https://github.com/mterber/blech-dcf77&#34; target=&#34;_blank&#34;&gt;available on GitHub&lt;/a&gt;
.&lt;/p&gt;
&lt;p&gt;Thank you very much &lt;a href=&#34;https://github.com/mterber&#34; target=&#34;_blank&#34;&gt;@mterber&lt;/a&gt;
 for this fine piece of work.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
