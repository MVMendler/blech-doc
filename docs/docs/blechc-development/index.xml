<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blech â€“ Guide to blechc development</title>
    <link>https://www.blech-lang.org/docs/blechc-development/</link>
    <description>Recent content in Guide to blechc development on Blech</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://www.blech-lang.org/docs/blechc-development/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Expressions, conditions, initialisers, constants</title>
      <link>https://www.blech-lang.org/docs/blechc-development/const-and-expr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.blech-lang.org/docs/blechc-development/const-and-expr/</guid>
      <description>
        
        
        &lt;h2 id=&#34;equality-expressions&#34;&gt;Equality expressions&lt;/h2&gt;
&lt;p&gt;Theoretically, every type supports some notion of equality (and inequality). 
This is straightforward for &lt;strong&gt;simple (or primitive) value types&lt;/strong&gt; that consist of one memory cell only (booleans and all numeric types of all sizes): 
&lt;code&gt;a == b&lt;/code&gt; holds iff the value of &lt;code&gt;a&lt;/code&gt; is the same as the value of &lt;code&gt;b&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For &lt;strong&gt;structured (complex) value types&lt;/strong&gt; we can decide equality by comparing every element of data structures recursively.
At compile time the result of a comparison can be evaluated if the arguments are compile time constants. 
Thus it is technically no problem to compare compile time constants of any value type.&lt;/p&gt;
&lt;p&gt;At runtime a recursive comparison algorithm is too much of a runtime penalty and what looks like a constant time operation turns out to be growing with the dimension of the structure. 
An optimisation of runtime - not changing the run-time complexity but providing better factors - could be achieved by comparing the data structures byte-wise (&lt;code&gt;memcmp&lt;/code&gt;).
But this requires to fix padding in structs and then fails in special cases: 
floating point elements may use different bit representations for the same numerical value, e.g. &lt;code&gt;+0.0&lt;/code&gt; and &lt;code&gt;-0.0&lt;/code&gt;. 
Consequently, the comparison operator for structured data may not be used at runtime (like in C) and results in a type check error.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Reference types are not implemented yet but in principle they will have the same behaviour: compare (dereferenced) values for simple types, and disallow comparison for complex types.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;using-constants&#34;&gt;Using constants&lt;/h2&gt;
&lt;p&gt;In order to make evaluation work for arbitrary constant expressions the names are resolved by the constant values (literals) they represent. 
Thus at the end of the type check phase the declarations of the consts do exist and can be translated to C but all their usages disappear (being substituted by the value).
This has the drawback of less readable C code but still allows to export constants as #defines and use them in foreign code by including the relevant &lt;code&gt;.h&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;In C89, structs can be initialised using structured literals but cannot be assigned new values using structured literals. 
The same is true for arrays in all versions of C. 
Additionally, when calling functions the arguments need to be pointers to memory locations that contain the (structured) data. 
In all these cases, in the generated C code we create a stack local (automatic) temporary variable that is initialised using the literal and then use that variable (or its address) to perform assignments or function calls. 
In summary, literals occur only on the right hand side of initialisation in the generated C code.&lt;/p&gt;
&lt;h2 id=&#34;side-effects-in-conditions-are-not-allowed&#34;&gt;Side effects in conditions are not allowed&lt;/h2&gt;
&lt;p&gt;It is obvious that testing an &lt;code&gt;await&lt;/code&gt; condition may not have any impact on the state to implement a synchronous program. 
Additionally, we forbid side effects in conditions of preemption and all standard, imperative statements. 
This clearly seperates concerns of making decision about the current program state and (possibly) triggering other, (possibly) concurrent computation. 
The common programming practice of C where conditions&amp;rsquo; side effects are used to also advance computation is regarded as bad practice in Blech until proven otherwise.&lt;/p&gt;
&lt;h2 id=&#34;side-effects-are-allowed-in-initialisers&#34;&gt;Side effects are allowed in initialisers&lt;/h2&gt;
&lt;p&gt;Despite the urge to restrict the wild programmer, we allow side effects when declaring and initialising a variable. 
Otherwise the following code that declares an immutable variable cannot be written:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-blech&#34; data-lang=&#34;blech&#34;&gt;let status = f()(x)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Instead, we would have to write&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-blech&#34; data-lang=&#34;blech&#34;&gt;var status: typeOfF
status = f()(x)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;which not only is longer and less readable but makes &lt;code&gt;status&lt;/code&gt; a mutable variable which is not the intention of the programmer.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Local and external variables</title>
      <link>https://www.blech-lang.org/docs/blechc-development/external-vars/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.blech-lang.org/docs/blechc-development/external-vars/</guid>
      <description>
        
        
        &lt;h2 id=&#34;local-variables&#34;&gt;Local variables&lt;/h2&gt;
&lt;p&gt;Variables declared with the scope of an activity are persistent.
They keep their value over multiple reactions.
Hence, in the generated code, they are stored outside the step-function of the given activity.
Instead they are passed as a context with every call of the step-function.&lt;/p&gt;
&lt;p&gt;Previous values however need not be stored in this static context.
In the generated code, they can be automatic variables (stack allocated variables) of the generated step-function.
The step-function itself will create the prev variables (where needed) and fill them before the actual step is carried out.&lt;/p&gt;
&lt;p&gt;Special attention has to be given to the reaction in which the declaration of the local variable takes place.
Here the local variable assumes its first value.
This is defined to be the prev value and thus the prev variable has to be reset here once.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-blech&#34; data-lang=&#34;blech&#34;&gt;...
var x: int32 = 7 // prev x = 7
cobegin
    run B(prev y)(x) // x may have changed
with
    run A(prev x)(y) // prev x is guaranteed to be 7 in the first reaction
end
...
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;external-variables&#34;&gt;External Variables&lt;/h2&gt;
&lt;p&gt;External variables (inside the activity scope) are dual to local variables in terms of code generation.
We do not need to store external variables in the static context which is passed to the step-function.
Instead an external variable will be represented by an automatic variable which is set at the beginning of the reaction using the value of the actual external C-variable that it is bound to.
At the end of the reaction, the final value is written back to the external C-variable (if it is a &lt;code&gt;var&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Previous values of external variables on the other hand must be persisted in static memory.
This is to guarantee synchronous semantics, i.e. the prev value really is the value that the last reaction ended with 
(while the value of the external variable is volatile and may have changed arbitrarily between reactions).
The code generator will create an extra local activity variable and add it to the list of local variables that are stored in the context.
The value of the prev variable will be set &lt;em&gt;at the end&lt;/em&gt; of each reaction, so it can be used in the next reaction.&lt;/p&gt;
&lt;p&gt;Again, special treatment is required in the code block that represents the reaction in which the declaration of the external variable becomes active.
Here, as before, the prev value has to be set once so it is defined in the case that the prev value is used in the same reaction.&lt;/p&gt;
&lt;h2 id=&#34;effects-on-compilation-contexts&#34;&gt;Effects on compilation contexts&lt;/h2&gt;
&lt;p&gt;If necessary, the function &lt;code&gt;ActivityTranslator.cpAction&lt;/code&gt; adds the external variable with a &lt;code&gt;prev_&lt;/code&gt; infix in its name to the &lt;code&gt;Compilation.iface.locals&lt;/code&gt; of the current activity.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ActivityTranslator.makeActCall&lt;/code&gt; transports the locals of the called activity to the interface of the current one which includes the prev&amp;rsquo;ed version of external variables.
In order to be able to print this interface as C code, the variables are added to the dictionary of known declarations in the type check context (&lt;code&gt;ctx.tcc.nameToDecl&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Since the entry point activity is never called from within the Blech program the above mechanism of adding variables to the type check context is repeated in &lt;code&gt;ActivityTranslator.translate&lt;/code&gt; (for the entry point activity only).&lt;/p&gt;
&lt;h2 id=&#34;effects-on-c-code-generation&#34;&gt;Effects on C-code generation&lt;/h2&gt;
&lt;p&gt;Printing external constants or params does not require any additional modifications. The given binding is simply inserted. For &lt;code&gt;extern let&lt;/code&gt; and &lt;code&gt;extern var&lt;/code&gt; additional effort is required.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;External variables&lt;/p&gt;
&lt;p&gt;Whenever an external variable is accessed as a right-hand-side, left-hand-side or the input or output argument to a call, it needs to be rendered differently than local activity variables.
This is because external variables are generated as automatic variables in the scope of the step-function (instead of being passed in with the context).
Thus they need to be rendered like local variables in Blech functions.
This is achieved by hooking in the &lt;code&gt;isExtCurVar&lt;/code&gt; function in the call of the &lt;code&gt;cpRenderData&lt;/code&gt;.
It will set the &lt;code&gt;subProgDecl&lt;/code&gt; to &lt;code&gt;Function&lt;/code&gt; if the variable name to be rendered is an access to the current memory location of an external variable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Access to previous locations of external variables&lt;/p&gt;
&lt;p&gt;Usually the previous value is stored in an automatic variable of the step-function and is accessed accordingly. The name is mangled by prepending a &lt;code&gt;prev_&lt;/code&gt; to the QName of the variable.
However previous values of external variables are stored in the context. Thus they need to be accessed like a local variable. The &lt;code&gt;prev_&lt;/code&gt; infix is already mangled into the QName that is stored in the context.
Thus &lt;code&gt;cpRenderData&lt;/code&gt; will change &lt;code&gt;timepoint&lt;/code&gt; to &lt;code&gt;Current&lt;/code&gt; and add the &lt;code&gt;prev_&lt;/code&gt; infix into the name to be rendered.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Copy-in / copy-out&lt;/p&gt;
&lt;p&gt;The function &lt;code&gt;ActivityTranslator.translate&lt;/code&gt; generates code for&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Copying the values from the bound external C-variables to the local memory inside the step-function at the beginning of the reaction.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Copying back the final results back to the bound external C-variables at the end of the reaction.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(If necessary,) setting the previous memory to the final current value of the external variable such that in the next reaction the prev value can be used.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;effects-on-json-trace-printing&#34;&gt;Effects on JSON trace printing&lt;/h2&gt;
&lt;p&gt;Since prev locations of external variables become local activity variables and are added to the type check context, they are printed in the trace along with the normal variables.
Note however that the value shown in the trace is the prev value for the &lt;em&gt;next&lt;/em&gt; reaction.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Translating Blech variable names to C</title>
      <link>https://www.blech-lang.org/docs/blechc-development/cpdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.blech-lang.org/docs/blechc-development/cpdata/</guid>
      <description>
        
        
        &lt;style type=&#34;text/css&#34;&gt;
    ol ol { list-style-type: lower-roman; }
&lt;/style&gt;
&lt;h2 id=&#34;possibilities-in-blech&#34;&gt;Possibilities in Blech&lt;/h2&gt;
&lt;p&gt;Variable names appear in different &lt;em&gt;syntactic&lt;/em&gt; contexts (expressions):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;current / previous access&lt;/li&gt;
&lt;li&gt;lhs / rhs value (in assignment)&lt;/li&gt;
&lt;li&gt;lhs / rhs reference (in procedure call)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Variable names appear in different &lt;em&gt;declaration&lt;/em&gt; contexts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Parameter input / output&lt;/li&gt;
&lt;li&gt;Global constant&lt;/li&gt;
&lt;li&gt;Activity- / function-local Blech variable&lt;/li&gt;
&lt;li&gt;Activity-local external C-variable&lt;/li&gt;
&lt;li&gt;Auxiliary variable introduced by the compiler&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Variable names may represent various kinds of data &lt;em&gt;types&lt;/em&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Simple (atomic)&lt;/li&gt;
&lt;li&gt;Structures&lt;/li&gt;
&lt;li&gt;Arrays&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Not all combinations are possible.
Below is an overview of what is possible in Blech and what the corresponding generated C code must look like.&lt;/p&gt;
&lt;h2 id=&#34;translation-workflow&#34;&gt;Translation workflow&lt;/h2&gt;
&lt;p&gt;Translating any access to data runs through several stages:&lt;/p&gt;
&lt;p&gt;Given a typed memory location &lt;code&gt;foo[0].bar&lt;/code&gt;&amp;hellip;
&lt;em&gt;(Remark: &lt;code&gt;prev foo[0].bar&lt;/code&gt; binds as &lt;code&gt;(prev foo)[0].bar&lt;/code&gt;).&lt;/em&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;For the QNamePrefix part &lt;code&gt;foo&lt;/code&gt;, determine a name scheme (depending on declaration context)
&lt;ol&gt;
&lt;li&gt;Static name &lt;code&gt;blc_&amp;lt;longId&amp;gt;_foo&lt;/code&gt; or &lt;code&gt;blc_&amp;lt;moduleName&amp;gt;_&amp;lt;longId&amp;gt;_foo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Parameter name &lt;code&gt;blc_foo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Auto name &lt;code&gt;blc_foo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Context element &lt;code&gt;blc_blech_ctx-&amp;gt;blc_foo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Auxiliary name &lt;code&gt;aux_blc_foo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;prev of Blech var &lt;code&gt;prev_blc_foo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;prev of extern var &lt;code&gt;blc_blech_ctx-&amp;gt;prev_blc_foo&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Ensure the name &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; generated above represents the memory blob itself, not a pointer to it
&lt;ol&gt;
&lt;li&gt;if &lt;code&gt;foo&lt;/code&gt; is a simple type or struct parameter rewrite name from above to &lt;code&gt;*&amp;lt;name&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Nothing to do for arrays as the name (pointer to the first element) already &lt;em&gt;represents&lt;/em&gt; the whole array blob.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Append all field / cell access to this name &lt;code&gt;&amp;lt;name&amp;gt;[0].bar&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Depending on usage context and type (of &lt;code&gt;bar&lt;/code&gt;) determine whether to use the path as is or construct a reference from it&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- .Usage context and type --&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;simple&lt;/th&gt;
&lt;th&gt;struct&lt;/th&gt;
&lt;th&gt;array&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;lhs assign&lt;/td&gt;
&lt;td&gt;as-is&lt;/td&gt;
&lt;td&gt;as-is&lt;/td&gt;
&lt;td&gt;as-is&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rhs assign&lt;/td&gt;
&lt;td&gt;as-is&lt;/td&gt;
&lt;td&gt;as-is&lt;/td&gt;
&lt;td&gt;as-is&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;output arg&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;amp;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;amp;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;as-is&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;input arg&lt;/td&gt;
&lt;td&gt;as-is&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;amp;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;as-is&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Possibly reduce trivial combinations like &lt;code&gt;&amp;amp;(*&amp;lt;name&amp;gt;)&lt;/code&gt; to &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt;. This will happen for e.g. simple typed output parameters passed on as an output argument.&lt;/p&gt;
&lt;h2 id=&#34;remarks-and-after-thoughts&#34;&gt;Remarks and after thoughts:&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;blc_&lt;/code&gt; prefix is used to make sure we never overwrite global variables with the same name (that might appear in C sources outside the scope of the generated Blech code). Of course, we assume that the &lt;code&gt;blc_&lt;/code&gt; prefix is reserved and not used by sources not generated by the Blech compiler.&lt;/p&gt;
&lt;p&gt;However previous variables use the scheme &lt;code&gt;prev_blc_&lt;/code&gt; making &lt;code&gt;prev_&lt;/code&gt; yet another exclusive prefix. We cannot simply generate &lt;code&gt;blc_prev_&amp;lt;id&amp;gt;&lt;/code&gt; for &lt;code&gt;prev &amp;lt;id&amp;gt;&lt;/code&gt; as this would clash with a regular Blech variable called &lt;code&gt;prev_id&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We also use &lt;code&gt;blc_&lt;/code&gt; for naming fields in the activity context. This ensure we rule out clashes between normal and prev&amp;rsquo;ed external variables in the activity context.&lt;/p&gt;
&lt;p&gt;Auxiliary variables use yet another prefix &lt;code&gt;aux_blc_&lt;/code&gt;.
This ensures they do not shadow a global C variable with the same name (assuming that the environment never uses names starting with &lt;code&gt;aux_blc_&lt;/code&gt;).
This is basically the same reasoning as with auto variables. However we need the extra &lt;code&gt;aux_&lt;/code&gt; to prevent a clash with an actual Blech variable.&lt;/p&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;

TODO: at the moment all constants and params in local scopes are lifted to the top level.
Why do we not use the &lt;code&gt;static&lt;/code&gt; keyword of C and let the declaration remain inside the function?
&lt;/div&gt;


      </description>
    </item>
    
    <item>
      <title>Docs: Git workflow</title>
      <link>https://www.blech-lang.org/docs/blechc-development/git-workflow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.blech-lang.org/docs/blechc-development/git-workflow/</guid>
      <description>
        
        
        &lt;h2 id=&#34;branches&#34;&gt;Branches&lt;/h2&gt;
&lt;p&gt;For the Blech compiler development we use branches and roughly follow the &lt;a href=&#34;https://gist.github.com/digitaljhelms/4287848&#34; target=&#34;_blank&#34;&gt;Git/Github branching standards &amp;amp; conventions&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;The contained &lt;a href=&#34;https://gist.github.com/digitaljhelms/4287848#workflow-diagram&#34; target=&#34;_blank&#34;&gt;workflow diagram&lt;/a&gt;
 visualizes this in a nice way.&lt;/p&gt;
&lt;p&gt;Since we did not release a stable version until now, we do not have stable branch but only a master branch that reflects the evolution of the language and gets tagged from time to time.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: </title>
      <link>https://www.blech-lang.org/docs/blechc-development/traversals/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.blech-lang.org/docs/blechc-development/traversals/</guid>
      <description>
        
        
        &lt;h2 id=&#34;recursive-traversals-that-do-similar-things&#34;&gt;Recursive traversals that do similar things&lt;/h2&gt;
&lt;!-- ## Recursive traversals on typed Blech data structures --&gt;
&lt;h3 id=&#34;typecheckingfs&#34;&gt;TypeChecking.fs&lt;/h3&gt;
&lt;h4 id=&#34;traversing-statements-only&#34;&gt;Traversing statements only&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;/// Determine the return type of a statement
let rec private stmtType stmt
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;/// An activity must have some synchronous delay statement on every possible 
/// execution path through its body.
/// This can be an await or a run statement.
// This is partially double work with causality analysis, 
// here and there we will find instantaneous loops.
// Here we throw an error if that is the only statement in the activity.
// In causality analysis we throw an error any way.
let private checkStmtsWillPause p name stmts
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;let private determineGlobalOutputs lut bodyRes
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;traversing-expressions-and-statements&#34;&gt;Traversing expressions and statements&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;/// Checks whether the lists of statements does not contain any synchronous
/// statements. This check is required for function bodies.
let private checkAbsenceOfSyncStmts stmts
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;let private determineCalledSingletons lut bodyRes =
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;tychkexpressionsfs&#34;&gt;TyChkExpressions.fs&lt;/h3&gt;
&lt;h4 id=&#34;traversing-expressions-only&#34;&gt;Traversing expressions only&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;/// Returns true when the evaluation of expr does not change the program&#39;s state
let rec private hasNoSideEffect expr
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;/// True if given expression contains only compile time or param values
let rec internal isStaticExpr lut expr
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;/// Given a typed rhs expression, this function tries to evaluate this 
/// expression to a constant and return a new TypedRhs such that
/// isLiteral returns true on that.
/// However, it may return a non-constant expression if it cannot be
/// reduced. No error is thrown.
let rec internal tryEvalConst lut (checkedExpr: TypedRhs) : TypedRhs
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;tychkamendmentfs&#34;&gt;TyChkAmendment.fs&lt;/h3&gt;
&lt;h4 id=&#34;traversing-expressions-only-1&#34;&gt;Traversing expressions only&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;/// Returns yes if the expression contains at least one name
/// This is useful for type checking where we want to make sure that
/// in a variable declaration such as &amp;quot;var x = 8&amp;quot;, we do not merely
/// look at the type of &amp;quot;8&amp;quot; which is int8 and falsely make x an int8
/// as well but instead give an error to the user.
let rec private exprContainsName rhs
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;programgraphfs&#34;&gt;ProgramGraph.fs&lt;/h3&gt;
&lt;h4 id=&#34;traversing-expressions-only-2&#34;&gt;Traversing expressions only&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;let rec internal addNameRead context node trhs =
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;/// This function is here temporarily. It solves the following problem:
/// Since the abort conditions are pushed into the body of the abort statement
/// conditions may become concurrent in the context of a cobegin in the body.
/// This is a problem if the condition is modified in the body. The scheduler
/// will generate wrong code following the write first-then read strategy.
/// To avoid that we prev all variables which are part of the abort condition
/// and which are modified inside the abort body.
/// In the future we want to generate code for preemptions differently
/// such that prev&#39;ing conditions won&#39;t be necessary.
/// This future implementation would introduce another control point which is
/// traversed in every reaction before executing any blocks that correspond to
/// the abort body.
/// The future solution would allow to use references in cond which cannot be prev&#39;ed.
/// As of right now references are not implemented and thus the 
/// current implementation always works.
let private tempPrevHelper context cond subPg
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;traversing-statements-only-1&#34;&gt;Traversing statements only&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;/// Generates a program graph for a given statement
let rec private createPGofStmt context thread stmt
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;cpdataaccessfs&#34;&gt;CPdataAccess.fs&lt;/h3&gt;
&lt;h4 id=&#34;traversing-expressions-only-3&#34;&gt;Traversing expressions only&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;/// Convert expressions into Doc
/// Ensures that function calls with struct literals in their input list are
/// converted to function calls on precomputed structure variables.
// The result propagates recursively.
// Even if the resulting data type is simple, the expression producing that
// may contain sub-expressions that need to be rewritten, e.g.
// g( f({i=8}) ), where f is simply boolean but its argument needs to be rewritten
and private cpExpr inFunction ctx expr
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;activitytranslatorfs&#34;&gt;ActivityTranslator.fs&lt;/h3&gt;
&lt;h4 id=&#34;traversing-expressions-only-4&#34;&gt;Traversing expressions only&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;/// Extract all QNames of variables that require a prev location in given code
// runs on nodes and program graphs instead of statements
// became necessary when strong abort was translated by introducing a prev on the condition and thus deviating from given source code
// might change again
let private collectVarsToPrev2 pg
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;functiontranslatorfs&#34;&gt;FunctionTranslator.fs&lt;/h3&gt;
&lt;h4 id=&#34;traversing-statements-only-2&#34;&gt;Traversing statements only&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;and private translateFunctionStatement ctx curComp stmt
&lt;/code&gt;&lt;/pre&gt;
      </description>
    </item>
    
  </channel>
</rss>
