<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blech â€“ Getting Started</title>
    <link>https://www.blech-lang.org/docs/getting-started/</link>
    <description>Recent content in Getting Started on Blech</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://www.blech-lang.org/docs/getting-started/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: The Blech compiler - blechc</title>
      <link>https://www.blech-lang.org/docs/getting-started/blechc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.blech-lang.org/docs/getting-started/blechc/</guid>
      <description>
        
        
        &lt;h2 id=&#34;build-blechc-from-source&#34;&gt;Build blechc from source&lt;/h2&gt;
&lt;p&gt;Clone the blech compiler project using&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;git clone https://github.com/boschresearch/blech
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To build the project, you need &lt;strong&gt;.NET Core&lt;/strong&gt; installed. Go to the &lt;a href=&#34;https://dotnet.microsoft.com/download&#34; target=&#34;_blank&#34;&gt;Microsoft .NET website&lt;/a&gt;
 and follow their instructions to install the latest stable &lt;strong&gt;.NET Core&lt;/strong&gt; available for your operating system.&lt;/p&gt;
&lt;p&gt;Navigate to the folder where you checked out the Blech project. It should contain the file &lt;code&gt;Blech.sln&lt;/code&gt;. Now you have choices:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For a simple &lt;strong&gt;debug build&lt;/strong&gt; run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;dotnet build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This creates &lt;code&gt;./src/blechc/bin/Debug/netcoreapp3.1/blechc.dll&lt;/code&gt;.
Use the dotnet command to start the compiler like so&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;dotnet ./src/blechc/bin/Debug/netcoreapp3.1/blechc.dll
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For a release build additionally use the &lt;code&gt;-c Release&lt;/code&gt; option.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finally, for a &lt;strong&gt;self-contained release build&lt;/strong&gt;, which is operating system dependent, you need to run &lt;code&gt;dotnet publish&lt;/code&gt; with a specific runtime identifier like so&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;dotnet publish -c Release -r win-x64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For Linux use &lt;code&gt;linux-x64&lt;/code&gt;, for MacOS use &lt;code&gt;osx-x64&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This creates a folder &lt;code&gt;./src/blechc/bin/Release/netcoreapp3.1/win-x64/publish&lt;/code&gt; which contains all files needed for execution. The folder as a whole can be moved arbitrarily.
Inside the folder invoke the binary&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;blechc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;to run the Blech compiler.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;use-blechc&#34;&gt;Use &lt;code&gt;blechc&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Assuming you have a binary of the Blech Compiler &lt;code&gt;blechc&lt;/code&gt; for your operating system, or you have built the Blech project yourself from sources, this sections tells you how to use it.&lt;/p&gt;
&lt;p&gt;If the &lt;code&gt;blechc&lt;/code&gt; binary is in your &lt;code&gt;$PATH&lt;/code&gt;, you can invoke the compiler by simply writing&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;blechc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;on the command line interface.
If you do not have a standalone (publish) build and want to use your local Debug (or Release) build, use the &lt;code&gt;dotnet&lt;/code&gt; command to start the compiler from your blech working directory.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;dotnet &amp;lt;path-to&amp;gt;/blech/src/blechc/bin/Debug/netcoreapp3.1/blechc.dll
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;From here on out we assume &lt;code&gt;blechc&lt;/code&gt; to be a synonym for either call above&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The following shows some typical invocations of &lt;code&gt;blechc&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Compile a Blech program:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;blechc someBlechFile.blc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Translates &lt;code&gt;someBlechFile.blc&lt;/code&gt; to C code silently. You will only see output on the command line if there are problems with the translation.
This will generate a file &lt;code&gt;blech.c&lt;/code&gt; in the same folder which contains a runnable program. It runs in a main loop and calls the entry point activity of &lt;code&gt;someBlechFile.blc&lt;/code&gt; 60 times. Furthermore in the subfolder &lt;code&gt;./blech&lt;/code&gt; two files are generated &lt;code&gt;someBlechFile.c&lt;/code&gt; and &lt;code&gt;someBlechFile.h&lt;/code&gt;. They contain the C code and interface declarations respectively.&lt;/p&gt;
&lt;p&gt;Compile with diagnostic messages:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;blechc -v d someBlechFile.blc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Does the same as above but prints out textual representations of intermediate compilation results including: typed syntax tree, control flow graphs and block graphs for activities, C code.&lt;/p&gt;
&lt;p&gt;Just check the programs correctness:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;blechc --dry-run someBlechFile.blc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Runs through all compilation phases but do not write any C files. This is useful to check for problems without actually touching anything on the file system.&lt;/p&gt;
&lt;p&gt;Try all the options&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;blechc --help
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;compile-generated-c-files&#34;&gt;Compile generated C files&lt;/h2&gt;
&lt;p&gt;By default the compiler produces a main program in &lt;code&gt;blech.c&lt;/code&gt; which can be used as a first test. To compile this code you need to include Blech specific C header files. These are located in &lt;code&gt;&amp;lt;path-to&amp;gt;/blech/src/blechc/include&lt;/code&gt;. 
On Windows C compilation may look like this.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;mingw32-cc.exe -I. -I&amp;lt;path-to&amp;gt;/blech/src/blechc/include blech.c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that the current folder &lt;code&gt;.&lt;/code&gt; is explicitly added as a path to be included.
The resulting executable will run the program for 60 reactions and print the variable evaluations after every reaction in JSON format.&lt;/p&gt;
&lt;p&gt;To include the generated C code in your own project inspect &lt;code&gt;blech.c&lt;/code&gt; for details. In particular, make sure you call the &lt;code&gt;init&lt;/code&gt; function on initial startup and then &lt;code&gt;tick&lt;/code&gt; with every reaction.
For programmers familiar with Arduino these correspond to the &lt;code&gt;setup&lt;/code&gt; and &lt;code&gt;loop&lt;/code&gt; functions.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Blech Language Services - the VS Code extension</title>
      <link>https://www.blech-lang.org/docs/getting-started/vsce/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.blech-lang.org/docs/getting-started/vsce/</guid>
      <description>
        
        
        &lt;h2 id=&#34;visual-studio-code-and-the-blech-language-services&#34;&gt;Visual Studio Code and the Blech Language Services&lt;/h2&gt;
&lt;p&gt;We package the Blech Language Servicex as an extension for VS Code that provides two functionalities:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;syntax highlighting, and&lt;/li&gt;
&lt;li&gt;a language server which checks the code every time it is saved.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This gives you editing support like code snippets, correct indentation, type checking or causality checking. 
In case of errors, it returns error messages to the user.
It also supports a few basic IDE functionalities.&lt;/p&gt;
&lt;p&gt;In order to use this, install Visual Studio Code (a.k.a. VS Code) either from &lt;a href=&#34;https://code.visualstudio.com/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;https://code.visualstudio.com/&lt;/a&gt;&lt;/a&gt;
 or from &lt;a href=&#34;https://github.com/VSCodium/vscodium/releases&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://github.com/VSCodium/vscodium/releases&#34;&gt;https://github.com/VSCodium/vscodium/releases&lt;/a&gt;&lt;/a&gt;
. 
It can be installed locally without admin rights.&lt;/p&gt;
&lt;h2 id=&#34;build-the-extension-from-source&#34;&gt;Build the extension from source&lt;/h2&gt;
&lt;p&gt;The build from source needs &lt;strong&gt;.NET Core&lt;/strong&gt; and &lt;strong&gt;NodeJS&lt;/strong&gt; for the Blech Language Services.&lt;/p&gt;
&lt;p&gt;If you &lt;a href=&#34;https://www.blech-lang.org/docs/getting-started/blechc/#build-blechc-from-source&#34;&gt;built the Blech compiler from source&lt;/a&gt;
 .NET Core is already installed.&lt;/p&gt;
&lt;p&gt;To install NodeJS &lt;a href=&#34;https://nodejs.org/&#34; target=&#34;_blank&#34;&gt;download and install the Long Term Support version&lt;/a&gt;
.
Enclosed is a version of the Node Package Manager &lt;code&gt;npm&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Test it with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;npm --version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;npm&lt;/code&gt; is frequently updated. In order to keep it up-to-date run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;npm install npm@latest -g
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In most case you should see an upgrade when you run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;npm --version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;prerequisites-for-building-the-extension&#34;&gt;Prerequisites for building the extension&lt;/h2&gt;
&lt;p&gt;Clone the &lt;code&gt;blech-tools&lt;/code&gt; repository, including the blech compiler submodule.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;git clone --recurse-submodules https://github.com/boschresearch/blech-tools.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Change to the &lt;code&gt;ide&lt;/code&gt; subdirectory.&lt;/p&gt;
&lt;p&gt;Install the node package &lt;code&gt;vsce&lt;/code&gt;, which is able to package VS Code extensions.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;npm -g install vsce
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Install the Typescript node package. Typescript is a the typed superset of JavaScript, which is used to build the extension.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;npm -g install typescript
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Install the necessary node modules for this project.
From the &lt;code&gt;ide&lt;/code&gt; subdirectory run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;npm install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Optionally: Run the TypeScript compilation.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;npm run compile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you like, you can learn more about &lt;a href=&#34;https://www.typescriptlang.org&#34; target=&#34;_blank&#34;&gt;the TypeScript language&lt;/a&gt;
, which is created by Microsoft.&lt;/p&gt;
&lt;h2 id=&#34;build-the-extension&#34;&gt;Build the extension&lt;/h2&gt;
&lt;p&gt;Besides syntax highlighting the Blech Language Services consisting of two parts which need to be compiled.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;A language server written in F#, which is a small wrapper around the Blech compiler.&lt;/p&gt;
&lt;p&gt;The language server is build using dotnet. From the &lt;code&gt;ide&lt;/code&gt; subdirector run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;dotnet publish -c Release -o bin -r win-x64 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Choose your runtime above &lt;a href=&#34;https://docs.microsoft.com/de-de/dotnet/core/rid-catalog&#34; target=&#34;_blank&#34;&gt;as necessary&lt;/a&gt;
 (&lt;code&gt;linux-x64&lt;/code&gt;, &lt;code&gt;linux-arm64&lt;/code&gt;, &lt;code&gt;osx-x64&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A VS code extension, which runs a client to the language server.
To build and package the client and the server as an extension run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;vsce package
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you get a security warning when using Windows powershell. Try running it from &lt;code&gt;cmd&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This gives you a &lt;code&gt;blech-language-services-0.&amp;lt;i&amp;gt;.&amp;lt;j&amp;gt;.vsix&lt;/code&gt; file in the same directory.&lt;/p&gt;
&lt;h2 id=&#34;install-the-extension&#34;&gt;Install the extension&lt;/h2&gt;
&lt;p&gt;You can install the Blech Language Services VS Code extension via the commandline or interactively.&lt;/p&gt;
&lt;p&gt;From the command line go to the &lt;code&gt;ide&lt;/code&gt; subdirectory run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;code blech-language-services-0.&amp;lt;i&amp;gt;.&amp;lt;j&amp;gt;.vsix
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;with the correct version number.&lt;/p&gt;
&lt;p&gt;If VS Code is already running: 
Open the Extension section, go to the &lt;code&gt;...&lt;/code&gt; menu, and select &lt;code&gt;Install from VSIX...&lt;/code&gt;.
Select the &lt;code&gt;blech-language-services-0.&amp;lt;i&amp;gt;.&amp;lt;j&amp;gt;.vsix&lt;/code&gt; file to install the extension.&lt;/p&gt;
&lt;p&gt;Verify it works by opening some &lt;code&gt;*.blc&lt;/code&gt; file. 
If the keywords are coloured, it works. 
Furthermore, if you hover over an activity name, you should see its signature in a tooltip.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
