<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blech – Blech language evolution</title>
    <link>https://www.blech-lang.org/docs/language-evolution/</link>
    <description>Recent content in Blech language evolution on Blech</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://www.blech-lang.org/docs/language-evolution/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Blech&#39;s interface to C</title>
      <link>https://www.blech-lang.org/docs/language-evolution/blech-c-interface/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.blech-lang.org/docs/language-evolution/blech-c-interface/</guid>
      <description>
        
        
        
      </description>
    </item>
    
    <item>
      <title>Docs: Bits and bytes</title>
      <link>https://www.blech-lang.org/docs/language-evolution/bits-and-bytes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.blech-lang.org/docs/language-evolution/bits-and-bytes/</guid>
      <description>
        
        
        &lt;h2 id=&#34;bits-and-bytes&#34;&gt;Bits and bytes&lt;/h2&gt;
&lt;p&gt;Some notes on &lt;a href=&#34;https://blog.feabhas.com/2014/10/vulnerabilities-in-c-when-integers-go-bad/&#34; target=&#34;_blank&#34;&gt;C’s integers&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;Some think, &lt;a href=&#34;https://www.learncpp.com/cpp-tutorial/unsigned-integers-and-why-to-avoid-them/&#34; target=&#34;_blank&#34;&gt;unsigned integers should be avoided&lt;/a&gt;
.&lt;/p&gt;
&lt;p&gt;For embedded this is not an option.&lt;/p&gt;
&lt;h3 id=&#34;rename-the-exponentiation-operator-&#34;&gt;Rename the exponentiation operator &lt;code&gt;^&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The exponention operator &lt;code&gt;^&lt;/code&gt; should be renamed to &lt;code&gt;**&lt;/code&gt; - maybe right associative.&lt;/p&gt;
&lt;p&gt;Maybe it would be better to deprecate the exponentiation operator completely.
A good argument for this change is given by the &lt;a href=&#34;https://devblogs.microsoft.com/csharpfaq/why-doesnt-c-have-a-power-operator/&#34; target=&#34;_blank&#34;&gt;C# FAQ&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;With this change &lt;code&gt;^&lt;/code&gt; becomes available for the standard bitwise XOR (exclusive or) operation.&lt;/p&gt;
&lt;h3 id=&#34;rename-uint-to-nat&#34;&gt;Rename &lt;code&gt;uint&lt;/code&gt; to &lt;code&gt;nat&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Inspiration &lt;a href=&#34;https://sdk.dfinity.org/language-guide/index.html&#34; target=&#34;_blank&#34;&gt;Motoko&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;Reason: &lt;code&gt;uint&lt;/code&gt; is not allowed to overflow and saturates in release code or panics in debug code.
The name &lt;code&gt;uint&lt;/code&gt; addresses the wrong association.
Therefore we should rename &lt;code&gt;uint&lt;/code&gt; to &lt;code&gt;nat&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;NOTE: Maybe we should rename &lt;code&gt;bitsN&lt;/code&gt; to &lt;code&gt;wordN&lt;/code&gt;. 
Those types occur only in 4 different sizes. 
The name &lt;code&gt;bits&lt;/code&gt; might be associated with an arbitrary number.
Additional inspiration, a &lt;a href=&#34;https://whatis.techtarget.com/definition/word&#34; target=&#34;_blank&#34;&gt;word&lt;/a&gt;
 is a unit of data of a defined bit length.
Therefore we should rename &lt;code&gt;bits&lt;/code&gt; to &lt;code&gt;word&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;allow-a-type-annotation-type-for-expressions&#34;&gt;Allow a type annotation &lt;code&gt;:&amp;lt;type&amp;gt;&lt;/code&gt; for expressions&lt;/h3&gt;
&lt;p&gt;It is mainly needed for literals.
It is consistent with type annotation in declarations.&lt;/p&gt;
&lt;p&gt;IMPORTANT: This is not a cast or a conversion, but only a type annotation, to give literals different meanings.&lt;/p&gt;
&lt;h3 id=&#34;eliminate-floatliteral32&#34;&gt;Eliminate &lt;code&gt;floatLiteral32&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Instead of using the specific &lt;code&gt;floatLiteral32&lt;/code&gt; we should use a type annotation.
With a type annotation any number literal can be used as a checked float literal.
This especially simplifies generic code.
Type annotation are anyway needed for binary, octal and hexadecimal literals.&lt;/p&gt;
&lt;p&gt;By default a floatLiteral and hexFloatLiteral are of type &lt;code&gt;float64&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;NOTE: Check that hexfloat literals are precise representations for their type.
NOTE: Maybe the default should be &lt;code&gt;float32&lt;/code&gt; for embedded systems?&lt;/p&gt;
&lt;p&gt;Any &lt;code&gt;natLiteral&lt;/code&gt; can be annotated with a float type.
The range is checked, to get a precise float representation.&lt;/p&gt;
&lt;p&gt;The following are all valid float literals.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-blech&#34; data-lang=&#34;blech&#34;&gt;
(42: float64)
(42: float32)

(-17: float32)
(-1.2: float32)

42.0 // has type float64
(42.0: float32)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;bit-types&#34;&gt;Bit types&lt;/h3&gt;
&lt;p&gt;Bit types allow bitwise, relational, and arithmetic operators.
Arithmetic operators wrap-around.&lt;/p&gt;
&lt;p&gt;Different to &lt;code&gt;nat&lt;/code&gt; types which must not over- or underflow.&lt;/p&gt;
&lt;h3 id=&#34;bitwise-operators&#34;&gt;Bitwise operators&lt;/h3&gt;
&lt;p&gt;Blech provides the standard set of &lt;a href=&#34;https://en.wikipedia.org/wiki/Bitwise_operations_in_C&#34; target=&#34;_blank&#34;&gt;bitwise operators known from C&lt;/a&gt;
.
Different to C these operators work on &lt;code&gt;bitsN&lt;/code&gt; types instead of unsigned &lt;code&gt;natN&lt;/code&gt; or signed &lt;code&gt;intN&lt;/code&gt; types.&lt;/p&gt;
&lt;h4 id=&#34;unary-bitwise-operator&#34;&gt;Unary bitwise operator&lt;/h4&gt;
&lt;p&gt;For N = 8, 16, 32, 64&lt;/p&gt;
&lt;p&gt;Bitwise negation: &lt;code&gt;~&lt;/code&gt;
Type: &lt;code&gt;function (bitsN) returns bitsN&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;binary-bitwise-operators&#34;&gt;Binary bitwise operators&lt;/h4&gt;
&lt;p&gt;More info on &lt;a href=&#34;https://en.wikipedia.org/wiki/Bitwise_operation&#34; target=&#34;_blank&#34;&gt;bitwise operations&lt;/a&gt;
.&lt;/p&gt;
&lt;p&gt;For N = 8, 16, 32, 64&lt;/p&gt;
&lt;p&gt;Bitwise and: &lt;code&gt;&amp;amp;&lt;/code&gt;
Bitwise or: &lt;code&gt;|&lt;/code&gt;
Bitwise xor: &lt;code&gt;^&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Type: &lt;code&gt;function (bitsN , bitsN) returns bitsN&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;shift-and-rotate-operators&#34;&gt;Shift and rotate operators&lt;/h4&gt;
&lt;p&gt;Standard shift operators&lt;/p&gt;
&lt;p&gt;shift left: &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;
shift right: &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Type: &lt;code&gt;function (bitsN, AnyNat) returns bitsN&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Additionally Blech should provide advanced shift operators&lt;/p&gt;
&lt;p&gt;Arithmetic shift right: &lt;code&gt;+&amp;gt;&amp;gt;&lt;/code&gt;
left rotate: &lt;code&gt;&amp;lt;&amp;lt;&amp;gt;&lt;/code&gt;
right rotate: &lt;code&gt;&amp;lt;&amp;gt;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Type: &lt;code&gt;function (bitsN, AnyNat) returns bitsN&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;These operators can be defined as Macros. 
If the macro has a suitable form, C compilers can translate circular shifts into one machine instruction.
C compilers recognize the &lt;a href=&#34;https://en.wikipedia.org/wiki/Circular_shift#Implementing_circular_shifts&#34; target=&#34;_blank&#34;&gt;circular shift idiom&lt;/a&gt;
.&lt;/p&gt;
&lt;p&gt;The shift and rotate amount is a general unsigned integer type. 
It is considered modulo the &lt;code&gt;bitsN&lt;/code&gt; width &lt;code&gt;N&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&#34;arithmetic-operators&#34;&gt;Arithmetic operators&lt;/h4&gt;
&lt;p&gt;As arithmetic types, &lt;code&gt;bitsN&lt;/code&gt; types implement numeric wrap-around (modulo &lt;code&gt;2**N&lt;/code&gt;).&lt;/p&gt;
&lt;h4 id=&#34;implicit-conversion&#34;&gt;Implicit conversion&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.guru99.com/c-type-casting.html&#34; target=&#34;_blank&#34;&gt;Implicit conversion in C&lt;/a&gt;
 is complicated.&lt;/p&gt;
&lt;p&gt;Implicit conversion is only allowed if no representation change is necessary.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;int8&lt;/code&gt; -&amp;gt; &lt;code&gt;int16&lt;/code&gt; -&amp;gt; &lt;code&gt;int32&lt;/code&gt; -&amp;gt; &lt;code&gt;int64&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;float32&lt;/code&gt; -&amp;gt; &lt;code&gt;float64&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nat8&lt;/code&gt; -&amp;gt; &lt;code&gt;nat16&lt;/code&gt; -&amp;gt; &lt;code&gt;nat32&lt;/code&gt; -&amp;gt; &lt;code&gt;nat64&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bits8&lt;/code&gt; -&amp;gt; &lt;code&gt;bits16&lt;/code&gt; -&amp;gt; &lt;code&gt;bits32&lt;/code&gt; -&amp;gt; &lt;code&gt;bits64&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;IMPORTANT: The representation of &lt;code&gt;char&lt;/code&gt; is still not decided&lt;/p&gt;
&lt;h4 id=&#34;safe-conversion-using-as&#34;&gt;Safe conversion using &lt;code&gt;as&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Conversion using the operator &lt;code&gt;as&lt;/code&gt; can be used for values.
That means:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;for right-hand side values&lt;/li&gt;
&lt;li&gt;for function input parameters&lt;/li&gt;
&lt;li&gt;for activity input parameters of simple type: &lt;code&gt;intN&lt;/code&gt;, &lt;code&gt;natN&lt;/code&gt;, &lt;code&gt;bitsN&lt;/code&gt;, &lt;code&gt;floatN&lt;/code&gt;, &lt;code&gt;char&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Conversion with representation change is only allowed if no information is lost (has the same bit-size).&lt;/p&gt;
&lt;h4 id=&#34;no-subtyping-for-bitsn-types&#34;&gt;No subtyping for &lt;code&gt;bitsN&lt;/code&gt; types&lt;/h4&gt;
&lt;p&gt;Whenever &lt;exp&gt; has type T and T &amp;lt;: U (T subtypes U) then by virture of implicit subsumption, &lt;exp&gt; also has type U (without extra syntax).&lt;/p&gt;
&lt;p&gt;In general, this means that an expression of a more specific type may appear wherever an expression of a more general type is expected, provided the specific and general types are related by subtyping.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bitsN&lt;/code&gt; types are in no subtype relation with each other.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bitsN&lt;/code&gt; types are in no subtype relation with other arithmetic types.&lt;/p&gt;
&lt;h3 id=&#34;literals&#34;&gt;Literals&lt;/h3&gt;
&lt;p&gt;Binary, octal and hexadecimal literals have type &lt;code&gt;AnyBits&lt;/code&gt;.
Decimal literals have type &lt;code&gt;AnyInteger&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;All literals of type &lt;code&gt;AnyBits&lt;/code&gt; need a type annotation in order to become an appropriate &lt;code&gt;bitsN&lt;/code&gt; type.&lt;/p&gt;
&lt;p&gt;A type annotation can be ommited if an assignment determines the type.&lt;/p&gt;
&lt;p&gt;For negative values of type &lt;code&gt;AnyInteger&lt;/code&gt; the two&amp;rsquo;s-complement representation is used to create the bits.&lt;/p&gt;
&lt;p&gt;IMPORTANT: The two&amp;rsquo;s-complement representation for &lt;code&gt;intN&lt;/code&gt; is not mandatory in C.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-blech&#34; data-lang=&#34;blech&#34;&gt;let b1: bits8 = 0x1
let b2 = 0x1 : bits8
let b3 = (0x1 : bits8) &amp;lt;&amp;lt; 2  // 0x4 as bits8
let b32 = 0x1A4: bits8   // type error not representable in bits8
let b4: bits8 = 255
let b5 = 255 : bits8 
let b6: bits8 = -129   // type error, no representable as 2-complement in bits8
let b7 = -128: bits8   // ok
let b8 = (-50 - 150): bits8 // compile time error, not representable as 2-complement in bits8
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;use-of-operations&#34;&gt;Use of operations&lt;/h3&gt;
&lt;p&gt;Bitwise operatorions and arithmetic operations cannot be applied to values of type &lt;code&gt;AnyBits&lt;/code&gt;.
Bitwise and arithmetic operations can only be applied to values of type &lt;code&gt;bitsN&lt;/code&gt;, that means the size has to be fixed before any operation.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-blech&#34; data-lang=&#34;blech&#34;&gt;let x: bits8 = -0x1 // type error size of `0x1` not known, for a suitable unary minus.
let x = -(0x1: bits8) // ok, is (0xFF: bits8), by wrap around.
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;hackers-delight-translated-to-blech&#34;&gt;Hacker&amp;rsquo;s Delight translated to Blech&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Hacker%27s_Delight&#34; target=&#34;_blank&#34;&gt;Hacker’s Delight&lt;/a&gt;
 is the definitive source of bitwise programming algorithms. 
It should be possible to use these hacks in Blech.&lt;/p&gt;
&lt;p&gt;Turn off the rightmost 1-bit in a byte, producing 0 if none (e.g. 0b_0101_1000 =&amp;gt; 0b_0101_0000, 0x_00 =&amp;gt; 0x_00).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-blech&#34; data-lang=&#34;blech&#34;&gt;var x: bits8
x = x &amp;amp; (x - (1: bits8))
// or
x = x &amp;amp; (x - 0x_01)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Turn on the rightmost 0-bit in a word, producing all 1&amp;rsquo;s if none (e.g. 0x7AF3 =&amp;gt; 0x7AF4, 0xFFFF =&amp;gt; 0xFFFF).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-blech&#34; data-lang=&#34;blech&#34;&gt;var x: bits32
x = x | (x + (1: bits32))
// or
x = x | (x + 0b_1)
&lt;/code&gt;&lt;/pre&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: References, borrowing and causality</title>
      <link>https://www.blech-lang.org/docs/language-evolution/borrowing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.blech-lang.org/docs/language-evolution/borrowing/</guid>
      <description>
        
        
        

&lt;div class=&#34;pageinfo pageinfo-primary&#34;&gt;
&lt;p&gt;The borrowing proposal is work in progress.&lt;/p&gt;

&lt;/div&gt;


      </description>
    </item>
    
    <item>
      <title>Docs: Programs and modules - the Blech compilation units</title>
      <link>https://www.blech-lang.org/docs/language-evolution/modules/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.blech-lang.org/docs/language-evolution/modules/</guid>
      <description>
        
        
        &lt;h2 id=&#34;introduction-to-compilation-units&#34;&gt;Introduction to compilation units&lt;/h2&gt;
&lt;p&gt;A compilation unit in Blech is a single file.
A file can either be a complete Blech program or a module.
A module can be imported to support the implementation of another module or a program.&lt;/p&gt;
&lt;h3 id=&#34;programs&#34;&gt;Programs&lt;/h3&gt;
&lt;p&gt;A program file is a Blech code file (a &lt;code&gt;.blc&lt;/code&gt;-file) that needs exactly one activity marked as  &lt;code&gt;@[EntryPoint]&lt;/code&gt;.
This activity is the &lt;em&gt;main&lt;/em&gt; routine of a Blech program.
A program can import other Blech modules for its implementation.
A program itself cannot be imported by another Blech program - it is not a module.
A program is always a top-level file of a Blech applicatiion&lt;/p&gt;
&lt;h3 id=&#34;modules&#34;&gt;Modules&lt;/h3&gt;
&lt;p&gt;A module is a Blech code file that is marked as a module in the first code line&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-blech&#34; data-lang=&#34;blech&#34;&gt;module mymodule
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;By default, all internals of module are hidden, nothing is exposed.
Inside a module everything is accessible in the normal declare-before-use order.&lt;/p&gt;
&lt;p&gt;Every top-level declaration inside a module can be exposed to be used by an importing module or program.
Different to other languages we do not use accessibility modifiers in front of declarations.
Instead we require an explicit declaration of exposed top-level declarations.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-blech&#34; data-lang=&#34;blech&#34;&gt;module mymodule exposes myActivity

function f() ... end

function MyActivity() 
    f()
    ...
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For exposing everything inside a module, which in usually is neither necessary nor recommended, there is a short cut &lt;code&gt;...&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-blech&#34; data-lang=&#34;blech&#34;&gt;module myothermodule exposes ...  // every thing can be used by an importing compilation unti
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In order to use a module it needs to be imported by another compilation unit, for example a Blech program.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-blech&#34; data-lang=&#34;blech&#34;&gt;import mymodule

@[EntryPoint]
activity MyMain()
    run mymodule.MyActivity()
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;By default all imports are qualified with the module name.
In order to shorten this, the imported module can be renamed.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-blech&#34; data-lang=&#34;blech&#34;&gt;import mymodule as mm

@[EntryPoint]
activity MyMain()
    run mm.MyActivity()
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In order to use an imported name without qualification is must be exposed at the import&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-blech&#34; data-lang=&#34;blech&#34;&gt;import mymodule exposes MyActivity

@[EntryPoint]
activity MyMain()
    run MyActivity()
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For exposing everything from an imported module, which is usually neither necessary nor recommended, you can use the short cut &lt;code&gt;...&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-blech&#34; data-lang=&#34;blech&#34;&gt;import mymodule exposes ...

@[EntryPoint]
activity MyMain()
    run MyActivity()
end
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Warning&lt;/h4&gt;
Since Blech has a very rigid no-shadowing policy, you cannot redefine an exposed identifier.
Therefore, use unqualified exposed imports sparingly.
&lt;/div&gt;

&lt;h3 id=&#34;signatures&#34;&gt;Signatures&lt;/h3&gt;
&lt;h3 id=&#34;test-programs&#34;&gt;Test programs&lt;/h3&gt;
&lt;h3 id=&#34;test-signatures&#34;&gt;Test signatures&lt;/h3&gt;
&lt;h3 id=&#34;file-structure&#34;&gt;File structure&lt;/h3&gt;

      </description>
    </item>
    
  </channel>
</rss>
