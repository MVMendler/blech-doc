<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blech – Blech language evolution</title>
    <link>https://www.blech-lang.org/docs/language-evolution/</link>
    <description>Recent content in Blech language evolution on Blech</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://www.blech-lang.org/docs/language-evolution/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Blech&#39;s interface to C</title>
      <link>https://www.blech-lang.org/docs/language-evolution/blech-c-interface/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.blech-lang.org/docs/language-evolution/blech-c-interface/</guid>
      <description>
        
        
        
      </description>
    </item>
    
    <item>
      <title>Docs: Bits and bytes</title>
      <link>https://www.blech-lang.org/docs/language-evolution/bits-and-bytes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.blech-lang.org/docs/language-evolution/bits-and-bytes/</guid>
      <description>
        
        
        &lt;h2 id=&#34;bits-and-bytes&#34;&gt;Bits and bytes&lt;/h2&gt;
&lt;p&gt;Some notes on &lt;a href=&#34;https://blog.feabhas.com/2014/10/vulnerabilities-in-c-when-integers-go-bad/&#34; target=&#34;_blank&#34;&gt;C’s integers&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;Some think, &lt;a href=&#34;https://www.learncpp.com/cpp-tutorial/unsigned-integers-and-why-to-avoid-them/&#34; target=&#34;_blank&#34;&gt;unsigned integers should be avoided&lt;/a&gt;
.&lt;/p&gt;
&lt;p&gt;For embedded this is not an option.&lt;/p&gt;
&lt;h3 id=&#34;rename-the-exponentiation-operator-&#34;&gt;Rename the exponentiation operator &lt;code&gt;^&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The exponention operator &lt;code&gt;^&lt;/code&gt; should be renamed to &lt;code&gt;**&lt;/code&gt; - maybe right associative.&lt;/p&gt;
&lt;p&gt;Maybe it would be better to deprecate the exponentiation operator completely.
A good argument for this change is given by the &lt;a href=&#34;https://devblogs.microsoft.com/csharpfaq/why-doesnt-c-have-a-power-operator/&#34; target=&#34;_blank&#34;&gt;C# FAQ&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;With this change &lt;code&gt;^&lt;/code&gt; becomes available for the standard bitwise XOR (exclusive or) operation.&lt;/p&gt;
&lt;h3 id=&#34;rename-uint-to-nat&#34;&gt;Rename &lt;code&gt;uint&lt;/code&gt; to &lt;code&gt;nat&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Inspiration &lt;a href=&#34;https://sdk.dfinity.org/language-guide/index.html&#34; target=&#34;_blank&#34;&gt;Motoko&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;Reason: &lt;code&gt;uint&lt;/code&gt; is not allowed to overflow and saturates in release code or panics in debug code.
The name &lt;code&gt;uint&lt;/code&gt; addresses the wrong association.
Therefore we should rename &lt;code&gt;uint&lt;/code&gt; to &lt;code&gt;nat&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;NOTE: Maybe we should rename &lt;code&gt;bitsN&lt;/code&gt; to &lt;code&gt;wordN&lt;/code&gt;. 
Those types occur only in 4 different sizes. 
The name &lt;code&gt;bits&lt;/code&gt; might be associated with an arbitrary number.
Additional inspiration, a &lt;a href=&#34;https://whatis.techtarget.com/definition/word&#34; target=&#34;_blank&#34;&gt;word&lt;/a&gt;
 is a unit of data of a defined bit length.
Therefore we should rename &lt;code&gt;bits&lt;/code&gt; to &lt;code&gt;word&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;allow-a-type-annotation-type-for-expressions&#34;&gt;Allow a type annotation &lt;code&gt;:&amp;lt;type&amp;gt;&lt;/code&gt; for expressions&lt;/h3&gt;
&lt;p&gt;It is mainly needed for literals.
It is consistent with type annotation in declarations.&lt;/p&gt;
&lt;p&gt;IMPORTANT: This is not a cast or a conversion, but only a type annotation, to give literals different meanings.&lt;/p&gt;
&lt;h3 id=&#34;eliminate-floatliteral32&#34;&gt;Eliminate &lt;code&gt;floatLiteral32&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Instead of using the specific &lt;code&gt;floatLiteral32&lt;/code&gt; we should use a type annotation.
With a type annotation any number literal can be used as a checked float literal.
This especially simplifies generic code.
Type annotation are anyway needed for binary, octal and hexadecimal literals.&lt;/p&gt;
&lt;p&gt;By default a floatLiteral and hexFloatLiteral are of type &lt;code&gt;float64&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;NOTE: Check that hexfloat literals are precise representations for their type.
NOTE: Maybe the default should be &lt;code&gt;float32&lt;/code&gt; for embedded systems?&lt;/p&gt;
&lt;p&gt;Any &lt;code&gt;natLiteral&lt;/code&gt; can be annotated with a float type.
The range is checked, to get a precise float representation.&lt;/p&gt;
&lt;p&gt;The following are all valid float literals.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;
(42: float64)
(42: float32)

(-17: float32)
(-1.2: float32)

42.0 // has type float64
(42.0: float32)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;bit-types&#34;&gt;Bit types&lt;/h3&gt;
&lt;p&gt;Bit types allow bitwise, relational, and arithmetic operators.
Arithmetic operators wrap-around.&lt;/p&gt;
&lt;p&gt;Different to &lt;code&gt;nat&lt;/code&gt; types which must not over- or underflow.&lt;/p&gt;
&lt;h3 id=&#34;bitwise-operators&#34;&gt;Bitwise operators&lt;/h3&gt;
&lt;p&gt;Blech provides the standard set of &lt;a href=&#34;https://en.wikipedia.org/wiki/Bitwise_operations_in_C&#34; target=&#34;_blank&#34;&gt;bitwise operators known from C&lt;/a&gt;
.
Different to C these operators work on &lt;code&gt;bitsN&lt;/code&gt; types instead of unsigned &lt;code&gt;natN&lt;/code&gt; or signed &lt;code&gt;intN&lt;/code&gt; types.&lt;/p&gt;
&lt;h4 id=&#34;unary-bitwise-operator&#34;&gt;Unary bitwise operator&lt;/h4&gt;
&lt;p&gt;For N = 8, 16, 32, 64&lt;/p&gt;
&lt;p&gt;Bitwise negation: &lt;code&gt;~&lt;/code&gt;
Type: &lt;code&gt;function (bitsN) returns bitsN&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;binary-bitwise-operators&#34;&gt;Binary bitwise operators&lt;/h4&gt;
&lt;p&gt;More info on &lt;a href=&#34;https://en.wikipedia.org/wiki/Bitwise_operation&#34; target=&#34;_blank&#34;&gt;bitwise operations&lt;/a&gt;
.&lt;/p&gt;
&lt;p&gt;For N = 8, 16, 32, 64&lt;/p&gt;
&lt;p&gt;Bitwise and: &lt;code&gt;&amp;amp;&lt;/code&gt;
Bitwise or: &lt;code&gt;|&lt;/code&gt;
Bitwise xor: &lt;code&gt;^&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Type: &lt;code&gt;function (bitsN , bitsN) returns bitsN&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;shift-and-rotate-operators&#34;&gt;Shift and rotate operators&lt;/h4&gt;
&lt;p&gt;Standard shift operators&lt;/p&gt;
&lt;p&gt;shift left: &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;
shift right: &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Type: &lt;code&gt;function (bitsN, AnyNat) returns bitsN&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Additionally Blech should provide advanced shift operators&lt;/p&gt;
&lt;p&gt;Arithmetic shift right: &lt;code&gt;+&amp;gt;&amp;gt;&lt;/code&gt;
left rotate: &lt;code&gt;&amp;lt;&amp;lt;&amp;gt;&lt;/code&gt;
right rotate: &lt;code&gt;&amp;lt;&amp;gt;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Type: &lt;code&gt;function (bitsN, AnyNat) returns bitsN&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;These operators can be defined as Macros. 
If the macro has a suitable form, C compilers can translate circular shifts into one machine instruction.
C compilers recognize the &lt;a href=&#34;https://en.wikipedia.org/wiki/Circular_shift#Implementing_circular_shifts&#34; target=&#34;_blank&#34;&gt;circular shift idiom&lt;/a&gt;
.&lt;/p&gt;
&lt;p&gt;The shift and rotate amount is a general unsigned integer type. 
It is considered modulo the &lt;code&gt;bitsN&lt;/code&gt; width &lt;code&gt;N&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&#34;arithmetic-operators&#34;&gt;Arithmetic operators&lt;/h4&gt;
&lt;p&gt;As arithmetic types, &lt;code&gt;bitsN&lt;/code&gt; types implement numeric wrap-around (modulo &lt;code&gt;2**N&lt;/code&gt;).&lt;/p&gt;
&lt;h4 id=&#34;implicit-conversion&#34;&gt;Implicit conversion&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.guru99.com/c-type-casting.html&#34; target=&#34;_blank&#34;&gt;Implicit conversion in C&lt;/a&gt;
 is complicated.&lt;/p&gt;
&lt;p&gt;Implicit conversion is only allowed if no representation change is necessary.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;int8&lt;/code&gt; -&amp;gt; &lt;code&gt;int16&lt;/code&gt; -&amp;gt; &lt;code&gt;int32&lt;/code&gt; -&amp;gt; &lt;code&gt;int64&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;float32&lt;/code&gt; -&amp;gt; &lt;code&gt;float64&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nat8&lt;/code&gt; -&amp;gt; &lt;code&gt;nat16&lt;/code&gt; -&amp;gt; &lt;code&gt;nat32&lt;/code&gt; -&amp;gt; &lt;code&gt;nat64&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bits8&lt;/code&gt; -&amp;gt; &lt;code&gt;bits16&lt;/code&gt; -&amp;gt; &lt;code&gt;bits32&lt;/code&gt; -&amp;gt; &lt;code&gt;bits64&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;IMPORTANT: The representation of &lt;code&gt;char&lt;/code&gt; is still not decided&lt;/p&gt;
&lt;h4 id=&#34;safe-conversion-using-as&#34;&gt;Safe conversion using &lt;code&gt;as&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Conversion using the operator &lt;code&gt;as&lt;/code&gt; can be used for values.
That means:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;for right-hand side values&lt;/li&gt;
&lt;li&gt;for function input parameters&lt;/li&gt;
&lt;li&gt;for activity input parameters of simple type: &lt;code&gt;intN&lt;/code&gt;, &lt;code&gt;natN&lt;/code&gt;, &lt;code&gt;bitsN&lt;/code&gt;, &lt;code&gt;floatN&lt;/code&gt;, &lt;code&gt;char&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Conversion with representation change is only allowed if no information is lost (has the same bit-size).&lt;/p&gt;
&lt;h4 id=&#34;no-subtyping-for-bitsn-types&#34;&gt;No subtyping for &lt;code&gt;bitsN&lt;/code&gt; types&lt;/h4&gt;
&lt;p&gt;Whenever &lt;exp&gt; has type T and T &amp;lt;: U (T subtypes U) then by virture of implicit subsumption, &lt;exp&gt; also has type U (without extra syntax).&lt;/p&gt;
&lt;p&gt;In general, this means that an expression of a more specific type may appear wherever an expression of a more general type is expected, provided the specific and general types are related by subtyping.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bitsN&lt;/code&gt; types are in no subtype relation with each other.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bitsN&lt;/code&gt; types are in no subtype relation with other arithmetic types.&lt;/p&gt;
&lt;h3 id=&#34;literals&#34;&gt;Literals&lt;/h3&gt;
&lt;p&gt;Binary, octal and hexadecimal literals have type &lt;code&gt;AnyBits&lt;/code&gt;.
Decimal literals have type &lt;code&gt;AnyInteger&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;All literals of type &lt;code&gt;AnyBits&lt;/code&gt; need a type annotation in order to become an appropriate &lt;code&gt;bitsN&lt;/code&gt; type.&lt;/p&gt;
&lt;p&gt;A type annotation can be ommited if an assignment determines the type.&lt;/p&gt;
&lt;p&gt;For negative values of type &lt;code&gt;AnyInteger&lt;/code&gt; the two&amp;rsquo;s-complement representation is used to create the bits.&lt;/p&gt;
&lt;p&gt;IMPORTANT: The two&amp;rsquo;s-complement representation for &lt;code&gt;intN&lt;/code&gt; is not mandatory in C.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;let b1: bits8 = 0x1
let b2 = 0x1 : bits8
let b3 = (0x1 : bits8) &amp;lt;&amp;lt; 2  // 0x4 as bits8
let b32 = 0x1A4: bits8   // type error not representable in bits8
let b4: bits8 = 255
let b5 = 255 : bits8 
let b6: bits8 = -129   // type error, no representable as 2-complement in bits8
let b7 = -128: bits8   // ok
let b8 = (-50 - 150): bits8 // compile time error, not representable as 2-complement in bits8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;use-of-operations&#34;&gt;Use of operations&lt;/h3&gt;
&lt;p&gt;Bitwise operatorions and arithmetic operations cannot be applied to values of type &lt;code&gt;AnyBits&lt;/code&gt;.
Bitwise and arithmetic operations can only be applied to values of type &lt;code&gt;bitsN&lt;/code&gt;, that means the size has to be fixed before any operation.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;let x: bits8 = -0x1 // type error size of `0x1` not known, for a suitable unary minus
let x = -(0x1: bits8) // ok, is (0xFF: bits8), by wrap around
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;hackers-delight-translated-to-blech&#34;&gt;Hacker&amp;rsquo;s Delight translated to Blech&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Hacker%27s_Delight&#34; target=&#34;_blank&#34;&gt;Hacker’s Delight&lt;/a&gt;
 is the definitive source of bitwise programming algorithms. 
It should be possible to use these hacks in Blech.&lt;/p&gt;
&lt;p&gt;Turn off the rightmost 1-bit in a byte, producing 0 if none (e.g. 0b_0101_1000 =&amp;gt; 0b_0101_0000, 0x_00 =&amp;gt; 0x_00).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;var x: bits8
x = x &amp;amp; (x - (1: bits8))
// or
x = x &amp;amp; (x - 0x_01)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Turn on the rightmost 0-bit in a word, producing all 1&amp;rsquo;s if none (e.g. 0x7AF3 =&amp;gt; 0x7AF4, 0xFFFF =&amp;gt; 0xFFFF).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;var x: bits32
x = x | (x + (1: bits32))
// or
x = x | (x + 0b_1)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: References, borrowing and causality</title>
      <link>https://www.blech-lang.org/docs/language-evolution/borrowing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.blech-lang.org/docs/language-evolution/borrowing/</guid>
      <description>
        
        
        

&lt;div class=&#34;pageinfo pageinfo-primary&#34;&gt;
&lt;p&gt;The borrowing proposal is work in progress.&lt;/p&gt;

&lt;/div&gt;


      </description>
    </item>
    
    <item>
      <title>Docs: Programs and modules - the Blech compilation units</title>
      <link>https://www.blech-lang.org/docs/language-evolution/modules/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.blech-lang.org/docs/language-evolution/modules/</guid>
      <description>
        
        
        

&lt;div class=&#34;pageinfo pageinfo-primary&#34;&gt;
&lt;p&gt;The modules proposal is work in progress.&lt;/p&gt;

&lt;/div&gt;

&lt;h2 id=&#34;introduction-to-compilation-units&#34;&gt;Introduction to compilation units&lt;/h2&gt;
&lt;p&gt;A compilation unit in Blech is a single file.
A file can either be a complete Blech program or a module.
A module can be imported to support the implementation of another module or a program.&lt;/p&gt;
&lt;h3 id=&#34;program-files&#34;&gt;Program files&lt;/h3&gt;
&lt;p&gt;A program file is a Blech code file (a &lt;code&gt;.blc&lt;/code&gt;-file) that needs exactly one activity marked as  an &lt;code&gt;@[EntryPoint]&lt;/code&gt;.
This activity is the &lt;em&gt;main&lt;/em&gt; routine of a Blech program.
The name of this entry point to your program can be choosen freely.
A program can use other Blech files for its implementation.
A program is always a top-level file of a Blech application.&lt;/p&gt;
&lt;h3 id=&#34;module-files&#34;&gt;Module files&lt;/h3&gt;
&lt;p&gt;A module file is a Blech code file that is supposed to be used for the implementation of other modules or programs.&lt;/p&gt;
&lt;p&gt;By default, all internals of a Blech code file are hidden.
In order to become a module, a Blech code file must be marked as a &lt;code&gt;module&lt;/code&gt; and export at least one top-level declaration or a wildcard, see below. TODO: Add a relref here, how?.&lt;/p&gt;
&lt;p&gt;Different to other languages we do not use accessibility modifiers in front of declarations.
Instead, we require an explicit declaration of exported top-level declarations.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;module exposes TopLevelIdentifier
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Every top-level declaration inside a module file can be exported to be used by another module or program file.
All neccessary declared identifiers must also be exported.
Optionally, the exported identifiers can be classified for readability.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;module exposes T, MyActivity

type T = int32

function f(x: T) ... end

function MyActivity(x: T) 
    f(x)
    ...
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this example the export of activity &lt;code&gt;MyActivity&lt;/code&gt; also requires the export of type alias &lt;code&gt;T&lt;/code&gt;.
The compiler checks the correctness of exports.
It is a compiler error, if type &lt;code&gt;T&lt;/code&gt; is not exported.
For a correct module file an interface file is created that contains all compile-time information that is necessary to compile a Blech file that uses this module file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;signature

type T = int32

function MyActivity(x: T)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;reusing-a-blech-file&#34;&gt;Reusing a Blech file&lt;/h2&gt;
&lt;p&gt;In order to reuse a blech module file it needs to be imported.
Only exported entities can be used.
The internal - non-exposed - entities are hidden.&lt;/p&gt;
&lt;h3 id=&#34;importing-a-blech-module-file-for-use-in-a-program-or-another-module&#34;&gt;Importing a Blech module file for use in a program or another module&lt;/h3&gt;
&lt;p&gt;In order to use a module file it needs to be imported by another compilation unit, for example a Blech program.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;import m = &amp;#34;mymodule&amp;#34;

@[EntryPoint]
activity MyMain()
    run m.MyActivity()
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Again, &lt;code&gt;&amp;quot;mymodule&amp;quot;&lt;/code&gt; resembles the file name of the module.
In order order to use it we declare a Blech identifier for the module.
It is fine to use any valid identifier, here &lt;code&gt;m&lt;/code&gt;.
By default all imports are qualified with this module name.
In order to use an imported name without qualification is must be exposed at the import.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;import m = &amp;#34;mymodule&amp;#34; exposes MyActivity

@[EntryPoint]
activity MyMain()
    var t: m.T 
    run MyActivity(t)
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note: The other exported entity &amp;ndash; type &lt;code&gt;T&lt;/code&gt; &amp;ndash; can only be used, when qualifed with the module name.&lt;/p&gt;
&lt;p&gt;For exposing everything from an imported module, which is usually neither necessary nor recommended, you can use the short cut &lt;code&gt;...&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;import _ = &amp;#34;mymodule&amp;#34; exposes ...

@[EntryPoint]
activity MyMain()
    var t: T 
    run MyActivity(t)
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this case, a wildcard &lt;code&gt;_&lt;/code&gt; for the module name can be used.&lt;/p&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Warning&lt;/h4&gt;

    Since Blech has a very rigid no-shadowing policy, you cannot redefine an exposed identifier.
Therefore, use unqualified exposed imports sparingly.

&lt;/div&gt;

&lt;p&gt;Usually, several &lt;code&gt;import&lt;/code&gt; declarations are necessary for a module or program file.&lt;/p&gt;
&lt;h3 id=&#34;no-implicit-export-for-imported-modules&#34;&gt;No implicit export for imported modules&lt;/h3&gt;
&lt;p&gt;Assume the following two modules.&lt;/p&gt;
&lt;p&gt;Module file &lt;code&gt;pair.blc&lt;/code&gt; only exports type alias &lt;code&gt;Pair&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;module exposes Pair

type Pair = [2]int32

function fst(p: Pair) return int32
    return p[0]
end

function snd(p: Pair) returns int32
    return p[1]
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Module file &lt;code&gt;usepair.blc&lt;/code&gt; imports modul &lt;code&gt;pair&lt;/code&gt;, but cannot access hidden functions &lt;code&gt;fst&lt;/code&gt; and &lt;code&gt;snd&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;import pair = &amp;#34;pair&amp;#34;

module exposes sum

function snd(p: Pair) return int32
    return p[2]
end

function sum(p: pair.Pair) returns int32
    return p[0] + snd(p)
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;On successful compilation the compiler generates the following signature - the interface of a module - in file &lt;code&gt;pair.blh&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;signature

type Pair = [2]int32
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Module &lt;code&gt;&amp;quot;usepair&amp;quot;&lt;/code&gt; requires an &lt;code&gt;import&lt;/code&gt; of module &lt;code&gt;&amp;quot;pair&amp;quot;&lt;/code&gt; and exports function &lt;code&gt;sum&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;import pair = &amp;#34;pair&amp;#34;

signature

function sum(p: pair.Pair) returns int32
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For reuse, a program that imports module file &lt;code&gt;&amp;quot;usepair&amp;quot;&lt;/code&gt; also needs to import module file &lt;code&gt;&amp;quot;pair&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;import up = &amp;#34;usepair&amp;#34;
import p = &amp;#34;pair&amp;#34;

@[EntryPoint]
activity Main()
    var p: p.Pair
    _ = up.sum(p)
    await true
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note: Module &lt;code&gt;&amp;quot;pair&amp;quot;&lt;/code&gt; is &lt;strong&gt;not&lt;/strong&gt; exported indirectly via the import of module &lt;code&gt;&amp;quot;usepair&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The following program cannot be compiled.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;import up = &amp;#34;usepair&amp;#34;

@[EntryPoint]
activity Main()
    var p: up.pair.Pair
              ^^^^--- unknown identifier
    _ = up.sum(p)
    await true
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;exporting-nothing&#34;&gt;Exporting nothing&lt;/h3&gt;
&lt;p&gt;For development purposes it might be useful to expose nothing until a module can be used.
A wildcard &lt;code&gt;_&lt;/code&gt; can be used for this purpose.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;module exposes _

type Pair = [2]int32

function fst(p: Pair) returns int32
    return p[0]
end

function snd(p: Pair) returns int32
    return p[1]
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;exporting-everything&#34;&gt;Exporting everything&lt;/h3&gt;
&lt;p&gt;Sometimes it might be useful to expose everything in a module.
There is a shortcut &lt;code&gt;...&lt;/code&gt; for this.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;module exposes ...

type Pair = [2]int32

function fst(p: Pair) returns int32
    return p[0]
end

function snd(p: Pair) returns int32
    return p[1]
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;exporting-abstract-types-as-new-types&#34;&gt;Exporting abstract types as new types&lt;/h3&gt;
&lt;p&gt;Sometimes it is useful to hide the implementation of a type, from its importers.
You can create a &lt;code&gt;newtype&lt;/code&gt; for this purpose.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;module exposes Pair, set, fst, snd

newtype Pair = [2]int32

function set(fst: int32, snd: int32) returns Pair
    return {fst, snd}
end

function fst(p: Pair) returns int32
    return p[0]
end

function snd(p: Pair) returns int32
    return p[1]
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Since the internal structure is unknown additional functions must be exposed.
The module&amp;rsquo;s signature does not expose the internal type structure.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;signature

newtype Pair

function set(fst: int32, snd: int32) returns Pair

function fst(p: Pair) returns int32

function snd(p: Pair) returns int32
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;non-cyclic-import-hierarchy&#34;&gt;Non-cyclic import hierarchy&lt;/h3&gt;
&lt;p&gt;The compiler takes care for non-cyclic import dependencies.
Cyclic-import dependencies are flaged as a dependency error.&lt;/p&gt;
&lt;p&gt;In order to compile a program or module file, every imported module is compiled recursively, if necessary.
Every imported module only needs to be loaded once.&lt;/p&gt;
&lt;h2 id=&#34;file-structure&#34;&gt;File structure&lt;/h2&gt;
&lt;h3 id=&#34;compiling-a-blech-module&#34;&gt;Compiling a Blech module&lt;/h3&gt;
&lt;p&gt;The compilation of a Blech module file, for example &lt;code&gt;module.blc&lt;/code&gt;, generates the following files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A Blech signature file &lt;code&gt;module.blh&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;a C header file &lt;code&gt;module.h&lt;/code&gt;, and&lt;/li&gt;
&lt;li&gt;a C implementation file &lt;code&gt;module.c&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The Blech signature file contains all static information for name checking, type checking and causality analysis.
The C header and implementations files are used to compile a Blech program.&lt;/p&gt;
&lt;h3 id=&#34;compiling-a-blech-program&#34;&gt;Compiling a Blech program&lt;/h3&gt;
&lt;p&gt;A Blech program file is not a module. Therefore, it cannot be imported. 
The compilation of a Blech program file, for example &lt;code&gt;program.blc&lt;/code&gt;, generates only&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A C header file &lt;code&gt;program.h&lt;/code&gt;, and&lt;/li&gt;
&lt;li&gt;a C implementation file &lt;code&gt;program.c&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;hierarchical-organisation-of-a-blech-project&#34;&gt;Hierarchical organisation of a Blech project&lt;/h3&gt;
&lt;p&gt;A Blech project consists of modules and program files, that are hierarchically structured.&lt;/p&gt;
&lt;h2 id=&#34;abstract-types-and-the-diamond-import-problem&#34;&gt;Abstract types and the diamond import problem&lt;/h2&gt;

      </description>
    </item>
    
  </channel>
</rss>
